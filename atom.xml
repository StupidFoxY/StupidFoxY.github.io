<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Tzmm的学习小总结</title>
  
  <subtitle>小脑袋里总记不住，看过就忘，记下来多看看</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2023-05-16T01:38:22.139Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Tzmm</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Nginx 部署</title>
    <link href="http://yoursite.com/2022/10/21/nginx/"/>
    <id>http://yoursite.com/2022/10/21/nginx/</id>
    <published>2022-10-21T05:20:12.000Z</published>
    <updated>2023-05-16T01:38:22.139Z</updated>
    
    <content type="html"><![CDATA[<h2 id="01-前言"><a href="#01-前言" class="headerlink" title="01 前言"></a>01 前言</h2><p>本文介绍在 ubuntu 系统下 Nginx 部署web的方式，以及多语言的部署方式。</p><h2 id="02-部署流程-ubuntu-系统"><a href="#02-部署流程-ubuntu-系统" class="headerlink" title="02 部署流程(ubuntu 系统)"></a>02 部署流程(ubuntu 系统)</h2><ol><li>Install NGINX from the package manager.</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install nginx</span><br></pre></td></tr></table></figure><ol start="2"><li>If port 80 on the firewall is closed, open port 80 on your system’s firewall.</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo ufw allow http</span><br><span class="line">sudo ufw reload</span><br></pre></td></tr></table></figure><ol start="3"><li>Disable the default NGINX configuration file.</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo unlink &#x2F;etc&#x2F;nginx&#x2F;sites-enabled&#x2F;default</span><br></pre></td></tr></table></figure><ol start="4"><li>cope file to <code>/var/www/</code>.</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cp -r dist&#x2F;demo&#x2F; &#x2F;var&#x2F;www&#x2F;xdemoxx.com</span><br></pre></td></tr></table></figure><ol start="5"><li>create config file. <code>/etc/nginx/sites-available/demo.com</code></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    listen [::]:80;</span><br><span class="line">    server_name  demo.com;</span><br><span class="line"></span><br><span class="line">    root &#x2F;var&#x2F;www&#x2F;demo.com;</span><br><span class="line">    index index.html;</span><br><span class="line"></span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line">        try_files $uri $uri&#x2F; &#x3D;404;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="6"><li>Enable your NGINX site.</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s &#x2F;etc&#x2F;nginx&#x2F;sites-available&#x2F;demo.com &#x2F;etc&#x2F;nginx&#x2F;sites-enabled&#x2F;</span><br></pre></td></tr></table></figure><ol start="7"><li>Run NGINX’s configuration test to verify your configuration file.</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nginx -t</span><br></pre></td></tr></table></figure><ol start="8"><li>Restart NGINX for the changes to take effect.</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart nginx</span><br></pre></td></tr></table></figure><h2 id="03-多语言的部署"><a href="#03-多语言的部署" class="headerlink" title="03 多语言的部署"></a>03 多语言的部署</h2><p>多语言的部署，需要对配置文件做一些改动</p><ol><li>update config file. <code>/etc/nginx/sites-available/xxx.com</code></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name demo.com;</span><br><span class="line">    root &#x2F;var&#x2F;www&#x2F;demo.com;</span><br><span class="line"></span><br><span class="line">    # Fallback to default language if no preference defined by browser</span><br><span class="line">    if ($accept_language ~ &quot;^$&quot;) &#123;</span><br><span class="line">        set $accept_language &quot;fr&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # Redirect &quot;&#x2F;&quot; to Angular application in the preferred language of the browser</span><br><span class="line">    rewrite ^&#x2F;$ &#x2F;$accept_language permanent;</span><br><span class="line"></span><br><span class="line">    # Everything under the Angular application is always redirected to Angular in the</span><br><span class="line">    # correct language</span><br><span class="line">    location ~ ^&#x2F;(fr|de|en) &#123;</span><br><span class="line">        try_files $uri &#x2F;$1&#x2F;index.html?$args;</span><br><span class="line">    &#125;</span><br><span class="line">    # ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>update <code>/etc/nginx/nginx.conf</code> file.</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    # Browser preferred language detection (does NOT require</span><br><span class="line">    # AcceptLanguageModule)</span><br><span class="line">    map $http_accept_language $accept_language &#123;</span><br><span class="line">        ~*^de de;</span><br><span class="line">        ~*^fr fr;</span><br><span class="line">        ~*^en en;</span><br><span class="line">    &#125;</span><br><span class="line">    # ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="04-Nginx-命令"><a href="#04-Nginx-命令" class="headerlink" title="04 Nginx 命令"></a>04 Nginx 命令</h2><ol><li>View the current status of the NGINX service using the command below:</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl status nginx</span><br></pre></td></tr></table></figure><ol start="2"><li>Stop the NGINX service with the following command:</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl stop nginx</span><br></pre></td></tr></table></figure><p>You can then start the NGINX service back up using the following command:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start nginx</span><br></pre></td></tr></table></figure><ol start="3"><li>To disable the NGINX service, preventing it from beginning automatically at system startup, execute the following:</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl disable nginx</span><br></pre></td></tr></table></figure><p>You can enable the NGINX service again using:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl enable nginx</span><br></pre></td></tr></table></figure><ol start="4"><li>Restart the NGINX service using the command below:</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart nginx</span><br></pre></td></tr></table></figure><ol start="5"><li>To reload NGINX’s configuration files, you an use the following command:</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl reload nginx</span><br></pre></td></tr></table></figure><h2 id="05-部署流程-centOS-系统"><a href="#05-部署流程-centOS-系统" class="headerlink" title="05 部署流程(centOS 系统)"></a>05 部署流程(centOS 系统)</h2><ol><li>安装Nginx相关依赖.</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum -y install gcc gcc-c++ make libtool zlib zlib-devel openssl openssl-devel pcre pcre-devel</span><br></pre></td></tr></table></figure><ol start="2"><li>下载nginx.tar.gz安装包 <a href="https://nginx.org/en/download.html" target="_blank" rel="noopener">nginx:dowload.html</a></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo wget -c https:&#x2F;&#x2F;nginx.org&#x2F;download&#x2F;nginx-1.18.0.tar.gz</span><br></pre></td></tr></table></figure><ol start="3"><li>解压，配置.</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf nginx-1.18.0.tar.gz</span><br><span class="line">cd nginx-1.18.0</span><br><span class="line">.&#x2F;configure</span><br></pre></td></tr></table></figure><ol start="4"><li>编译安装</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><ol start="5"><li>启动Nginx</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 启动</span><br><span class="line">sudo &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx</span><br></pre></td></tr></table></figure><ol start="6"><li>cope file to <code>/var/www/</code>.</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo cp -r dist&#x2F;web-client&#x2F; &#x2F;var&#x2F;www&#x2F;cogenda-cloud</span><br><span class="line">sudo cp -r dist&#x2F;web-manager&#x2F; &#x2F;var&#x2F;www&#x2F;cogenda-cloud</span><br></pre></td></tr></table></figure><ol start="7"><li>update <code>/usr/local/nginx/conf/nginx.conf</code> file.</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    # Browser preferred language detection (does NOT require</span><br><span class="line">    # AcceptLanguageModule)</span><br><span class="line">    map $http_accept_language $accept_language &#123;</span><br><span class="line">        ~*^zh-CN zh-CN;</span><br><span class="line">        ~*^en-US en-US;</span><br><span class="line">    &#125;</span><br><span class="line">    # ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#web-client</span><br><span class="line">server &#123;</span><br><span class="line">    listen 8080;</span><br><span class="line">    server_name web-client;</span><br><span class="line">    root &#x2F;var&#x2F;www&#x2F;cogenda-cloud&#x2F;web-client;</span><br><span class="line"></span><br><span class="line">    # Fallback to default language if no preference defined by browser</span><br><span class="line">    if ($accept_language ~ &quot;^$&quot;) &#123;</span><br><span class="line">        set $accept_language &quot;en-US&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # Redirect &quot;&#x2F;&quot; to Angular application in the preferred language of the browser</span><br><span class="line">    rewrite ^&#x2F;$ &#x2F;$accept_language permanent;</span><br><span class="line"></span><br><span class="line">    # Everything under the Angular application is always redirected to Angular in the</span><br><span class="line">    # correct language</span><br><span class="line">    location ~ ^&#x2F;(zh-CN|en-US) &#123;</span><br><span class="line">        try_files $uri &#x2F;$1&#x2F;index.html?$args;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#web-manager</span><br><span class="line">server &#123;</span><br><span class="line">    listen 8090;</span><br><span class="line">    server_name web-manager;</span><br><span class="line">    root &#x2F;var&#x2F;www&#x2F;cogenda-cloud&#x2F;web-manager;</span><br><span class="line"></span><br><span class="line">    # Fallback to default language if no preference defined by browser</span><br><span class="line">    if ($accept_language ~ &quot;^$&quot;) &#123;</span><br><span class="line">        set $accept_language &quot;en-US&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # Redirect &quot;&#x2F;&quot; to Angular application in the preferred language of the browser</span><br><span class="line">    rewrite ^&#x2F;$ &#x2F;$accept_language permanent;</span><br><span class="line"></span><br><span class="line">    # Everything under the Angular application is always redirected to Angular in the</span><br><span class="line">    # correct language</span><br><span class="line">    location ~ ^&#x2F;(zh-CN|en-US) &#123;</span><br><span class="line">        try_files $uri &#x2F;$1&#x2F;index.html?$args;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="8"><li>restart Nginx.</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx -s reload</span><br></pre></td></tr></table></figure><ol start="9"><li>新增端口</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install firewalld       #安装动态防火墙管理工具</span><br><span class="line">sudo systemctl start firewalld   #启动</span><br><span class="line">sudo firewall-cmd --zone&#x3D;public --add-port&#x3D;8080&#x2F;tcp --permanent     #永久增加端口，重启也有效</span><br><span class="line">sudo firewall-cmd --zone&#x3D;public --add-port&#x3D;8090&#x2F;tcp --permanent</span><br><span class="line">sudo firewall-cmd --reload       #重启</span><br></pre></td></tr></table></figure><ol start="10"><li>设置开机启动Nginx</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cd &#x2F;etc&#x2F;</span><br><span class="line">sudo vim rc.local</span><br><span class="line"></span><br><span class="line">#增加一行</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx</span><br><span class="line"></span><br><span class="line">#保存并退出vim 执行</span><br><span class="line">chmod 755 rc.local</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;01-前言&quot;&gt;&lt;a href=&quot;#01-前言&quot; class=&quot;headerlink&quot; title=&quot;01 前言&quot;&gt;&lt;/a&gt;01 前言&lt;/h2&gt;&lt;p&gt;本文介绍在 ubuntu 系统下 Nginx 部署web的方式，以及多语言的部署方式。&lt;/p&gt;
&lt;h2 id=&quot;02
      
    
    </summary>
    
    
      <category term="进阶应用" scheme="http://yoursite.com/categories/%E8%BF%9B%E9%98%B6%E5%BA%94%E7%94%A8/"/>
    
    
      <category term="部署" scheme="http://yoursite.com/tags/%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>Generator 函数</title>
    <link href="http://yoursite.com/2021/12/03/generator/"/>
    <id>http://yoursite.com/2021/12/03/generator/</id>
    <published>2021-12-03T01:34:40.000Z</published>
    <updated>2021-12-03T07:45:17.727Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Generator 函数是 ES6 提供的一种异步编程解决方案，语法行为与传统函数完全不同。本文将详细介绍 Generator 函数的语法和 API。</p><h2 id="01-基本概念"><a href="#01-基本概念" class="headerlink" title="01 基本概念"></a>01 基本概念</h2><p>语法上，Generator 函数可以理解为一个状态机，封装了多个内部状态。执行 Generator 函数会返回一个遍历器对象，可以依次遍历 Generator 函数内部的每一个状态。所以 Generator 函数还是一个遍历器对象生成函数。</p><p>形式上，Generator 函数与普通函数差别不大，但是有两个特征：</p><ul><li>function 关键字与函数名之间有一个星号</li><li>函数体内部使用 yield 表达式，定义不同的内部状态</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">helloWorldGenerator</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">'hello'</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">'world'</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'ending'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> hw = helloWorldGenerator();</span><br></pre></td></tr></table></figure><p>上面代码定义了一个 Generator 函数 helloWorldGenerator，它内部有两个 yield 表达式（hello 和 world），即该函数有三个状态：hello，world 和 return 语句（结束执行）。</p><p>Generator 函数的调用方法与普通函数一样。不同的是，调用 Generator 函数后，该函数并不执行，返回的也不是函数运行结果，而是一个指向内部状态的指针对象。</p><p>下一步，必须调用遍历器对象的 next 方法，使得指针移向下一个状态。也就是说，每次调用 next 方法，内部指针就从函数头部或上一次停下来的地方开始执行，直到遇到下一个 yield 表达式（或 return 语句）为止。</p><p>换言之，Generator 函数是分段执行的，yield 表达式是暂停执行的标记，而 next 方法可以恢复执行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">hw.next();</span><br><span class="line"><span class="comment">// &#123; value: 'hello', done: false &#125;</span></span><br><span class="line"></span><br><span class="line">hw.next();</span><br><span class="line"><span class="comment">// &#123; value: 'world', done: false &#125;</span></span><br><span class="line"></span><br><span class="line">hw.next();</span><br><span class="line"><span class="comment">// &#123; value: 'ending', done: true &#125;</span></span><br><span class="line"></span><br><span class="line">hw.next();</span><br><span class="line"><span class="comment">// &#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure><p>上面代码一共调用了四次 next 方法。每次调用 next 方法，都会返回一个有 value 和 done 两个属性的对象。</p><ul><li>value 属性表示当前的内部状态的值，是 yield 表达式后面那个表达式的值</li><li>done 属性是一个布尔值，表示是否遍历结束</li></ul><p>ES6 没有规定，function关键字与函数名之间的星号，写在哪个位置。这导致下面的写法都能通过。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> * <span class="title">foo</span>(<span class="params">x, y</span>) </span>&#123; ··· &#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> *<span class="title">foo</span>(<span class="params">x, y</span>) </span>&#123; ··· &#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">foo</span>(<span class="params">x, y</span>) </span>&#123; ··· &#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span>*<span class="title">foo</span>(<span class="params">x, y</span>) </span>&#123; ··· &#125;</span><br></pre></td></tr></table></figure><p>由于 Generator 函数仍然是普通函数，所以会采用第三种写法。</p><p>当 Generator 函数作为对象的属性时，可以采用一下两种写法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  * myGeneratorMethod() &#123;</span><br><span class="line">    ···</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//等价于</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  myGeneratorMethod: <span class="function"><span class="keyword">function</span>* (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ···</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="02-yield-表达式"><a href="#02-yield-表达式" class="headerlink" title="02 yield 表达式"></a>02 yield 表达式</h2><p>由于 Generator 函数返回的遍历器对象，只有调用 next 方法才会遍历下一个内部状态，所以其实提供了一种可以暂停执行的函数。而 yield 表达式就是暂停标志。</p><p>遍历器对象的 next 方法的运行逻辑如下：</p><ol><li>遇到 yield 表达式，就暂停执行后面的操作，并将紧跟在 yield 后面的那个表达式的值，作为返回的对象的 value 属性值。</li><li>下一次调用 next 方法时，再继续往下执行，直到遇到下一个 yield 表达式。</li><li>如果不在存在 yield 表达式，就一直运行到函数结束，直到 return 语句为止，并将 return 语句后面的表达式的值，作为返回的对象的 value 属性值。</li><li>如果该函数没有 return 语句，则返回的对象的 value 属性值为 undefined。</li></ol><p>基于这种运行逻辑，Generator 函数为 JavaScript 提供了手动的“惰性求值”（Lazy Evaluation）的语法功能。</p><p>另外需要注意，yield 表达式只能用在 Generator 函数里面，用在其他地方都会报错。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">&#125;)()</span><br><span class="line"><span class="comment">// SyntaxError: Unexpected number</span></span><br></pre></td></tr></table></figure><p>另一个例子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> flat = <span class="function"><span class="keyword">function</span>* (<span class="params">a</span>)</span>&#123;</span><br><span class="line">    a.forEach(<span class="function">(<span class="params">item</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">yield</span> item;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> f <span class="keyword">of</span> flat(arr))&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(f);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Uncaught SyntaxError: Unexpected identifier</span></span><br></pre></td></tr></table></figure><p>上面代码也会产生句法错误，因为forEach方法的参数是一个普通函数，但是在里面使用了yield表达式，改用for循环就能解决此问题。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> flat = <span class="function"><span class="keyword">function</span>* (<span class="params">a</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; a.length; i++)&#123;</span><br><span class="line">        <span class="keyword">yield</span> a[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> f <span class="keyword">of</span> flat(arr))&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(f);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//1, 2, 3, 4, 5</span></span><br></pre></td></tr></table></figure><p>另外，yield 表达式如果用在另一个表达式之中，必须放在圆括号里面。但 yield 表达式用作函数参数或放在赋值表达式的右边，可以不加括号。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">demo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Hello'</span> + <span class="keyword">yield</span>); <span class="comment">// SyntaxError</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Hello'</span> + <span class="keyword">yield</span> <span class="number">123</span>); <span class="comment">// SyntaxError</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Hello'</span> + (<span class="keyword">yield</span>)); <span class="comment">// OK</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Hello'</span> + (<span class="keyword">yield</span> <span class="number">123</span>)); <span class="comment">// OK</span></span><br><span class="line"></span><br><span class="line">  foo(<span class="keyword">yield</span> <span class="string">'a'</span>, <span class="keyword">yield</span> <span class="string">'b'</span>); <span class="comment">// OK</span></span><br><span class="line">  <span class="keyword">let</span> input = <span class="keyword">yield</span>; <span class="comment">// OK</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="与Iterator接口的关系"><a href="#与Iterator接口的关系" class="headerlink" title="与Iterator接口的关系"></a>与Iterator接口的关系</h3><p>任意一个对象的<code>Symbol.iterator</code>方法，等于该对象的遍历器生成函数，调用该函数会返回该对象的一个遍历器对象。</p><p>由于 Generator 函数就是遍历器生成函数，因此可以把 Generator 赋值给对象的<code>Symbol.iterator</code>属性，从而使得该对象具有 Iterator 接口。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myIterable = &#123;&#125;;</span><br><span class="line">myIterable[<span class="built_in">Symbol</span>.iterator] = <span class="function"><span class="keyword">function</span>* (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">3</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">[...myIterable] <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure><p>另外 Generator 函数执行后，返回一个遍历器对象。该对象本身也具有<code>Symbol.iterator</code>属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">gen</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">3</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> g = gen();</span><br><span class="line"></span><br><span class="line">[...g] <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure><p>这里需要注意，一旦 next 方法的返回对象的 done 属性为<code>true</code>，遍历器就会中止，且不包含该返回对象，所以上面代码的 return 语句返回的<code>4</code>不在结构赋值<code>...g</code>的循环中。</p><p><code>for...of</code>循环也是同理。另外原生的 JavaScript 对象没有遍历接口，无法使用 for…of 循环，通过 Generator 函数为它加上这个接口，就可以用了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">objectEntries</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> propKeys = <span class="built_in">Reflect</span>.ownKeys(obj);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> propKey <span class="keyword">of</span> propKeys) &#123;</span><br><span class="line">    <span class="keyword">yield</span> [propKey, obj[propKey]];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> jane = &#123; <span class="attr">first</span>: <span class="string">'Jane'</span>, <span class="attr">last</span>: <span class="string">'Doe'</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> objectEntries(jane)) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;key&#125;</span>: <span class="subst">$&#123;value&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// first: Jane</span></span><br><span class="line"><span class="comment">// last: Doe</span></span><br></pre></td></tr></table></figure><p>另一种写法是将 Generator 函数加到对象的<code>Symbol.iterator</code>属性上面。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">objectEntries</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> propKeys = <span class="built_in">Object</span>.keys(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> propKey <span class="keyword">of</span> propKeys) &#123;</span><br><span class="line">    <span class="keyword">yield</span> [propKey, <span class="keyword">this</span>[propKey]];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> jane = &#123; <span class="attr">first</span>: <span class="string">'Jane'</span>, <span class="attr">last</span>: <span class="string">'Doe'</span> &#125;;</span><br><span class="line"></span><br><span class="line">jane[<span class="built_in">Symbol</span>.iterator] = objectEntries;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> jane) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;key&#125;</span>: <span class="subst">$&#123;value&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// first: Jane</span></span><br><span class="line"><span class="comment">// last: Doe</span></span><br></pre></td></tr></table></figure><h2 id="03-next-方法"><a href="#03-next-方法" class="headerlink" title="03 next 方法"></a>03 next 方法</h2><p>yield 表达式本身没有返回值，或者说总是返回<code>undefined</code>。next 方法可以带一个参数，该参数就会被当作上一个 yield 表达式的返回值。</p><p>这个功能有很重要的语法意义。Generator 函数从暂停状态到恢复运行，它的上下文状态（context）是不变的。通过<code>next()</code>方法的参数，可以在 Generator 函数运行的不同阶段，从外部向内部注入不同的值，从而调整函数行为。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">foo</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> y = <span class="number">2</span> * (<span class="keyword">yield</span> (x + <span class="number">1</span>));</span><br><span class="line">  <span class="keyword">var</span> z = <span class="keyword">yield</span> (y / <span class="number">3</span>);</span><br><span class="line">  <span class="keyword">return</span> (x + y + z);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = foo(<span class="number">5</span>);</span><br><span class="line">a.next() <span class="comment">// Object&#123;value:6, done:false&#125;</span></span><br><span class="line">a.next() <span class="comment">// Object&#123;value:NaN, done:false&#125;</span></span><br><span class="line">a.next() <span class="comment">// Object&#123;value:NaN, done:true&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = foo(<span class="number">5</span>);</span><br><span class="line">b.next() <span class="comment">// &#123; value:6, done:false &#125;</span></span><br><span class="line">b.next(<span class="number">12</span>) <span class="comment">// &#123; value:8, done:false &#125;</span></span><br><span class="line">b.next(<span class="number">13</span>) <span class="comment">// &#123; value:42, done:true &#125;</span></span><br></pre></td></tr></table></figure><p>上面代码中，a 的第二次运行步骤如下：</p><ol><li>第一次调用 next 方法的时候不带参数，返回<code>x+1</code>的值<code>6</code></li><li>第二次调用 next 方法的时候不带参数，导致 y 的值等于<code>2 * undefined</code>（即NaN），<code>y / 3</code> 的值为<code>NaN</code>，返回对象的 value 属性也等于<code>NaN</code>。</li><li>第三次调用 next 方法的时候不带参数，导致 z 等于<code>undefined</code>，返回对象的 value 属性等于<code>5 + NaN + undefined</code>，即<code>NaN</code>。</li></ol><p>而 b 的运行就不一样了：</p><ol><li>第一次调用 next 方法的时候不带参数，返回<code>x+1</code>的值<code>6</code></li><li>第二次调用 next 方法，将上一次 yield 表达式的值设为<code>12</code>，因此 y 等于<code>2 * 12</code>，即<code>24</code>。<code>y / 3</code> 的值为<code>8</code>，返回对象的 value 属性也等于<code>8</code>。</li><li>第三次调用 next 方法，将上一次 yield 表达式的值设为<code>13</code>，因此 z 等于<code>13</code>，返回对象的 value 属性等于<code>5 + 8 + 13</code>,即<code>42</code>。</li></ol><p>注意，由于 next 方法的参数表示上一个 yield 表达式的返回值，所以在第一次使用next方法时，传递参数是无效的。V8 引擎直接忽略第一次使用 next 方法时的参数，只有从第二次使用 next 方法开始，参数才是有效的。</p><h2 id="04-throw-方法"><a href="#04-throw-方法" class="headerlink" title="04 throw 方法"></a>04 throw 方法</h2><p>Generator 函数返回的遍历器对象，都有一个<code>throw()</code>方法，可以在函数体外抛出错误，然后在 Generator 函数体内捕获。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> g = <span class="function"><span class="keyword">function</span>* (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">yield</span>;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'内部捕获'</span>, e);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> i = g();</span><br><span class="line">i.next();</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  i.throw(<span class="string">'a'</span>);</span><br><span class="line">  i.throw(<span class="string">'b'</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'外部捕获'</span>, e);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 内部捕获 a</span></span><br><span class="line"><span class="comment">// 外部捕获 b</span></span><br></pre></td></tr></table></figure><p>上面代码中，遍历器对象 i 连续抛出两个错误。第一个错误被 Generator 函数体内的 catch 语句捕获。i 第二次抛出错误，由于 Generator 函数内部的catch 语句已经执行过了，不会再捕捉到这个错误了，所以这个错误就被抛出了 Generator 函数体，被函数体外的 catch 语句捕获。</p><p>throw 方法可以接受一个参数，该参数会被 catch 语句接收，建议抛出<code>Error对象</code>的实例。</p><p>如果 Generator 函数内部没有部署<code>try...catch</code>代码块，那么 throw 方法抛出的错误，将被外部 try…catch 代码块捕获。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> g = <span class="function"><span class="keyword">function</span>* (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">yield</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'内部捕获'</span>, e);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> i = g();</span><br><span class="line">i.next();</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  i.throw(<span class="string">'a'</span>);</span><br><span class="line">  i.throw(<span class="string">'b'</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'外部捕获'</span>, e);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 外部捕获 a</span></span><br></pre></td></tr></table></figure><p>如果 Generator 函数内部和外部，都没有部署<code>try...catch</code>代码块，那么程序将报错，直接中断执行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gen = <span class="function"><span class="keyword">function</span>* <span class="title">gen</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="built_in">console</span>.log(<span class="string">'hello'</span>);</span><br><span class="line">  <span class="keyword">yield</span> <span class="built_in">console</span>.log(<span class="string">'world'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> g = gen();</span><br><span class="line">g.next();</span><br><span class="line">g.throw();</span><br><span class="line"><span class="comment">// hello</span></span><br><span class="line"><span class="comment">// Uncaught undefined</span></span><br></pre></td></tr></table></figure><p>另外 throw 方法抛出的错误要被内部捕获，前提是必须至少执行过一次 next 方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> g = <span class="function"><span class="keyword">function</span>* (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">yield</span>;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'内部捕获'</span>, e);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> i = g();</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  i.throw(<span class="string">'a'</span>);</span><br><span class="line">  i.throw(<span class="string">'b'</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'外部捕获'</span>, e);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 外部捕获 a</span></span><br></pre></td></tr></table></figure><p>throw 方法被捕获以后，会附带执行下一条<code>yield</code>表达式。也就是说，会附带执行一次<code>next</code>方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gen = <span class="function"><span class="keyword">function</span>* <span class="title">gen</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="built_in">console</span>.log(<span class="string">'a'</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">yield</span> <span class="built_in">console</span>.log(<span class="string">'b'</span>);</span><br><span class="line">  <span class="keyword">yield</span> <span class="built_in">console</span>.log(<span class="string">'c'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> g = gen();</span><br><span class="line">g.next()  <span class="comment">// a</span></span><br><span class="line">g.throw() <span class="comment">// b</span></span><br><span class="line">g.next()  <span class="comment">// c</span></span><br></pre></td></tr></table></figure><p>Generator 函数体外抛出的错误，可以在函数体内捕获；反过来，Generator 函数体内抛出的错误，也可以被函数体外的 catch 捕获。</p><p>一旦 Generator 执行过程中抛出错误，且没有被内部捕获，就不会再执行下去了。如果此后还调用next 方法，将返回一个<code>value</code>属性等于<code>undefined</code>、<code>done</code>属性等于<code>true</code>的对象，即 JavaScript 引擎认为这个 Generator 已经运行结束了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">g</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'throwing an exception'</span>);</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'generator broke!'</span>);</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params">generator</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> v;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'starting generator'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    v = generator.next();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'第一次运行next方法'</span>, v);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'捕捉错误'</span>, v);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    v = generator.next();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'第二次运行next方法'</span>, v);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'捕捉错误'</span>, v);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    v = generator.next();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'第三次运行next方法'</span>, v);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'捕捉错误'</span>, v);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'caller done'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">log(g());</span><br><span class="line"></span><br><span class="line"><span class="comment">// starting generator</span></span><br><span class="line"><span class="comment">// 第一次运行next方法 &#123; value: 1, done: false &#125;</span></span><br><span class="line"><span class="comment">// throwing an exception</span></span><br><span class="line"><span class="comment">// 捕捉错误 &#123; value: 1, done: false &#125;</span></span><br><span class="line"><span class="comment">// 第三次运行next方法 &#123; value: undefined, done: true &#125;</span></span><br><span class="line"><span class="comment">// caller done</span></span><br></pre></td></tr></table></figure><h2 id="05-return-方法"><a href="#05-return-方法" class="headerlink" title="05 return 方法"></a>05 return 方法</h2><p>Generator 函数返回的遍历器对象，还有一个<code>return()</code>方法，可以返回给定的值，并且终结遍历 Generator 函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">gen</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> g = gen();</span><br><span class="line"></span><br><span class="line">g.next()        <span class="comment">// &#123; value: 1, done: false &#125;</span></span><br><span class="line">g.return(<span class="string">'foo'</span>) <span class="comment">// &#123; value: "foo", done: true &#125;</span></span><br><span class="line">g.next()        <span class="comment">// &#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure><p>如果<code>return()</code>方法调用时，不提供参数，则返回值的<code>value</code>属性为<code>undefined</code>。</p><p>如果 Generator 函数内部有<code>try...finally</code>代码块，且正在执行 try 代码块，那么<code>return()</code>方法会导致立刻进入<code>finally</code>代码块，执行完以后，整个函数才会结束。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">numbers</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">3</span>;</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">5</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">6</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> g = numbers();</span><br><span class="line">g.next() <span class="comment">// &#123; value: 1, done: false &#125;</span></span><br><span class="line">g.next() <span class="comment">// &#123; value: 2, done: false &#125;</span></span><br><span class="line">g.return(<span class="number">7</span>) <span class="comment">// &#123; value: 4, done: false &#125;</span></span><br><span class="line">g.next() <span class="comment">// &#123; value: 5, done: false &#125;</span></span><br><span class="line">g.next() <span class="comment">// &#123; value: 7, done: true &#125;</span></span><br></pre></td></tr></table></figure><h2 id="06-yield-表达式"><a href="#06-yield-表达式" class="headerlink" title="06 yield* 表达式"></a>06 yield* 表达式</h2><p>如果在 Generator 函数内部，调用另一个 Generator 函数。需要在前者的函数体内部，自己手动完成遍历。</p><p>ES6 提供了<code>yield*</code>表达式，作为解决办法，用来在一个 Generator 函数里面执行另一个 Generator 函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">'a'</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">'b'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">'x'</span>;</span><br><span class="line">  <span class="keyword">yield</span>* foo();</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">'y'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">'x'</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> f <span class="keyword">of</span> foo()) &#123;</span><br><span class="line">    <span class="keyword">yield</span> f;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">'y'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> bar())&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// "x"</span></span><br><span class="line"><span class="comment">// "a"</span></span><br><span class="line"><span class="comment">// "b"</span></span><br><span class="line"><span class="comment">// "y"</span></span><br></pre></td></tr></table></figure><p>上面代码说明，<code>yield*</code>后面的 Generator 函数（没有<code>return</code>语句时），不过是<code>for...of</code>的一种简写形式，完全可以用后者替代前者。反之，在有<code>return</code>语句时，则需要用<code>var value = yield* iterator</code>的形式获取<code>return</code>语句的值。</p><p>简单来说<code>yield*</code>是对任何数据结构只要有 Iterator 接口遍历的语法糖。</p><h2 id="07-Generator-函数中的-this"><a href="#07-Generator-函数中的-this" class="headerlink" title="07 Generator 函数中的 this"></a>07 Generator 函数中的 this</h2><p>由于 Generator 函数返回的是遍历器对象，不是<code>this</code>对象，因此 Generator 函数也不能跟new命令一起用，会报错。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">F</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="keyword">this</span>.x = <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="keyword">this</span>.y = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = F();</span><br><span class="line">obj.next();    <span class="comment">//&#123;value: 2, done: false&#125;</span></span><br><span class="line">obj.a          <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> F()        <span class="comment">// TypeError: F is not a constructor</span></span><br></pre></td></tr></table></figure><p>当让也不是没有办法解决此问题，下面是一个变通方法。首先，生成一个空对象，使用<code>call</code>方法绑定 Generator 函数内部的<code>this</code>。这样，构造函数调用以后，这个空对象就是 Generator 函数的实例对象了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">F</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.a = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="keyword">this</span>.b = <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="keyword">this</span>.c = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> f = F.call(obj);</span><br><span class="line"></span><br><span class="line">f.next();  <span class="comment">// Object &#123;value: 2, done: false&#125;</span></span><br><span class="line">f.next();  <span class="comment">// Object &#123;value: 3, done: false&#125;</span></span><br><span class="line">f.next();  <span class="comment">// Object &#123;value: undefined, done: true&#125;</span></span><br><span class="line"></span><br><span class="line">obj.a <span class="comment">// 1</span></span><br><span class="line">obj.b <span class="comment">// 2</span></span><br><span class="line">obj.c <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p>上面代码中，执行的是遍历器对象<code>f</code>，但是生成的对象实例是<code>obj</code>，这样代码的可读性显然不好。</p><p>一个办法就是将<code>obj</code>换成<code>F.prototype</code>，再将<code>F</code>改成构造函数，就可以对它执行<code>new</code>命令了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">gen</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.a = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="keyword">this</span>.b = <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="keyword">this</span>.c = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> gen.call(gen.prototype);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> f = <span class="keyword">new</span> F();</span><br><span class="line"></span><br><span class="line">f.next();  <span class="comment">// Object &#123;value: 2, done: false&#125;</span></span><br><span class="line">f.next();  <span class="comment">// Object &#123;value: 3, done: false&#125;</span></span><br><span class="line">f.next();  <span class="comment">// Object &#123;value: undefined, done: true&#125;</span></span><br><span class="line"></span><br><span class="line">f.a <span class="comment">// 1</span></span><br><span class="line">f.b <span class="comment">// 2</span></span><br><span class="line">f.c <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><h2 id="08-总结"><a href="#08-总结" class="headerlink" title="08 总结"></a>08 总结</h2><p>Generator 函数是 ES6 提供的一种异步编程解决方案。返回一个遍历器对象，可以依次遍历 Generator 函数内部的每一个状态。</p><p>形式上采用 function 关键字与函数名之间有一个星号，函数体内部使用<code>yield</code>表达式，定义不同的内部状态。</p><p><code>next()</code>、<code>throw()</code>、<code>return()</code>这三个方法本质上是同一件事，作用都是让 Generator 函数恢复执行，并且使用不同的语句替换<code>yield</code>表达式。</p><ul><li><code>next()</code>是将<code>yield</code>表达式替换成一个值。</li><li><code>throw()</code>是将<code>yield</code>表达式替换成一个<code>throw</code>语句。</li><li><code>return()</code>是将<code>yield</code>表达式替换成一个<code>return</code>语句。</li></ul><p><code>yield*</code>表达式，本质上是对具有<code>Iterator</code>接口的任何数据结构进行遍历，可以用来简化在一个 Generator 函数里面执行另一个 Generator 函数的写法。</p><p>而Generator 函数由于返回的是遍历器对象，不是<code>this</code>对象，因此不能与<code>new</code>命令一起使用，可以采用<code>call</code>方法 Generator 函数内部的<code>this</code>方法解决。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Generator 函数是 ES6 提供的一种异步编程解决方案，语法行为与传统函数完全不同。本文将详细介绍 Generator 函数的语法和
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="异步" scheme="http://yoursite.com/tags/%E5%BC%82%E6%AD%A5/"/>
    
  </entry>
  
  <entry>
    <title>WebAssembly[未完成]</title>
    <link href="http://yoursite.com/2021/09/10/webassembly/"/>
    <id>http://yoursite.com/2021/09/10/webassembly/</id>
    <published>2021-09-10T02:54:12.000Z</published>
    <updated>2022-10-21T05:30:57.102Z</updated>
    
    <content type="html"><![CDATA[<h2 id="01-什么是-WebAssembly"><a href="#01-什么是-WebAssembly" class="headerlink" title="01 什么是 WebAssembly"></a>01 什么是 WebAssembly</h2><p>WebAssembly 是一种新的编码方式，可以在现代的网络浏览器中运行。它是一种低级的类汇编语言，具有紧凑的二进制格式，可以接近原生的性能运行，并为诸如 C/C ++ 等语言提供一个编译目标，以便它们可以在 Web 上运行。它也被设计为可以与 JavaScript 共存，允许两者一起工作。</p><h2 id="02-如何使用-WebAssembly"><a href="#02-如何使用-WebAssembly" class="headerlink" title="02 如何使用  WebAssembly"></a>02 如何使用  WebAssembly</h2><p>简单来说要使用WebAssembly，主要分为两步：</p><ul><li>从 C/C++ 等语言编译为 WebAssembly</li><li>加载运行 WebAssembly</li></ul><p>下图是 C/C++ 语言编译为 WebAssembly 在 Web 项目中运行的流程。下面详细介绍 Linux 如何应用。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/emscripten-diagram.png" alt="WebAssembly 流程" title="">                </div>                <div class="image-caption">WebAssembly 流程</div>            </figure><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><p>编译需要使用 Emscripten 将 C/C++ 之类的语言所编写模块编译到WebAssembly。</p><h4 id="Emscripten-环境安装"><a href="#Emscripten-环境安装" class="headerlink" title="Emscripten 环境安装"></a>Emscripten 环境安装</h4><p>需要通过源码自己编译一个 Emscripten。运行下列命令来自动化地使用 Emscripten SDK。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;juj&#x2F;emsdk.git</span><br><span class="line">cd emsdk</span><br><span class="line"></span><br><span class="line">.&#x2F;emsdk install latest</span><br><span class="line">.&#x2F;emsdk activate latest --global</span><br><span class="line"></span><br><span class="line">source .&#x2F;emsdk_env.sh</span><br></pre></td></tr></table></figure><blockquote><p>注意: –global 标识会让PATH变量在全局被设置，所以接下来所打开的终端或者命令行窗口都会被设置。如果您仅仅想让 Emscripten 在当前窗口生效，就删掉这个标识。</p></blockquote><blockquote><p>注意: 每当您想要使用 Emscripten 时，尝试从远程更新最新的 Emscripten 代码是个很好的习惯（运行 git pull）。如果有更新，重新执行 install 和 activate 命令。这样就可以确保您使用的 Emscripten 一直保持最新。</p></blockquote><h4 id="将-C-编译为-WebAssembly"><a href="#将-C-编译为-WebAssembly" class="headerlink" title="将 C 编译为 WebAssembly"></a>将 C 编译为 WebAssembly</h4><p>以著名的斐波那契数列为例</p><blockquote><p>/wasm/fibonacci.c</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;emscripten.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> EMSCRIPTEN_KEEPALIVE <span class="title">fibonacci</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (n == <span class="number">0</span> || n == <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> (fibonacci(n - <span class="number">1</span>) + fibonacci(n - <span class="number">2</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在一个已经配置过 Emscripten 编译环境的终端窗口中以下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">emcc wasm&#x2F;fibonacci.c -Os -s WASM&#x3D;1 -s MODULARIZE&#x3D;1 -o wasm&#x2F;fibonacci.js</span><br></pre></td></tr></table></figure><ul><li><code>-Os</code> - 定义执行的优化等级，我们在这里使用了相当高的等级。</li><li><code>-s WASM=1</code> - 指定我们想要的wasm输出形式。如果我们不指定这个选项，Emscripten 默认将只会生成 asm.js。</li><li><code>-s MODULARIZE=1</code> - 除了 WASM，编译器还会生成一个 JavaScript 文件。该文件包含一些粘合代码，用于处理 WASM 和 JavaScript 之间的通信。使用 MODULARIZE=1 选项，我们告诉编译器将该代码包装到一个模块中。方便后续在 Angular 中使用。</li><li><code>-o wasm/fibonacci.js</code> - 定义输出文件。</li></ul><h3 id="加载与运行"><a href="#加载与运行" class="headerlink" title="加载与运行"></a>加载与运行</h3><p>WebAssembly 还没有和 <script type='module'> 或 ES6 的 impor t语句集成，也就是说，当前还没有内置的方式让浏览器为你获取模块。当前唯一的方式就是创建一个包含你的 WebAssembly 模块二进制代码的 ArrayBuffer 并且使用 WebAssembly.instantiate() 编译它。</p><h4 id="使用Fetch"><a href="#使用Fetch" class="headerlink" title="使用Fetch"></a>使用Fetch</h4><p>Fetch 是一个用来获取网络资源的方便现代的 API。</p><p>假设网络上有一个叫做 simple.wasm 的 WebAssembly 模块：</p><ul><li>我们可以使用fetch()全局函数来轻松地获取它，该函数返回一个可以解析为Response对象的promise。</li><li>我们可以使用arrayBuffer()函数把响应（response）转换为带类型数组，该函数返回一个可以解析为带类型数组的promise。</li><li>最后，我们使用WebAssembly.instantiate()函数一步实现编译和实例化带类型数组。</li></ul><p>代码块看起来像这样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">'module.wasm'</span>).then(<span class="function"><span class="params">response</span> =&gt;</span></span><br><span class="line">  response.arrayBuffer()</span><br><span class="line">).then(<span class="function"><span class="params">bytes</span> =&gt;</span></span><br><span class="line">  WebAssembly.instantiate(bytes, importObject)</span><br><span class="line">).then(<span class="function"><span class="params">results</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// Do something with the compiled results!</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>注意： WebAssembly.instantiate不是获取(fetch)和实例化wasm模块的最具效率方法。 如果可能的话，您应该改用较新的WebAssembly.instantiateStreaming()方法，该方法直接从原始字节码中直接获取，编译和实例化模块，因此不需要转换为ArrayBuffer。</p></blockquote><p>使用 WebAssembly.instantiateStreaming:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">WebAssembly.instantiateStreaming(fetch(<span class="string">'simple.wasm'</span>), importObject</span><br><span class="line">).then(<span class="function"><span class="params">results</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// Do something with the compiled results!</span></span><br><span class="line">  results.instance.exports.exported_func();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;01-什么是-WebAssembly&quot;&gt;&lt;a href=&quot;#01-什么是-WebAssembly&quot; class=&quot;headerlink&quot; title=&quot;01 什么是 WebAssembly&quot;&gt;&lt;/a&gt;01 什么是 WebAssembly&lt;/h2&gt;&lt;p&gt;WebAss
      
    
    </summary>
    
    
      <category term="进阶应用" scheme="http://yoursite.com/categories/%E8%BF%9B%E9%98%B6%E5%BA%94%E7%94%A8/"/>
    
    
      <category term="应用" scheme="http://yoursite.com/tags/%E5%BA%94%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript的执行上下文和执行栈[未完成]</title>
    <link href="http://yoursite.com/2021/08/09/execution-context/"/>
    <id>http://yoursite.com/2021/08/09/execution-context/</id>
    <published>2021-08-09T05:53:10.000Z</published>
    <updated>2021-12-03T07:02:43.409Z</updated>
    
    <content type="html"><![CDATA[<p>执行上下文是当前 JavaScript 代码被解析和执行时所在环境的抽象概念。</p><h2 id="01-执行上下文的类型"><a href="#01-执行上下文的类型" class="headerlink" title="01 执行上下文的类型"></a>01 执行上下文的类型</h2><p>执行上下文总共有三种类型</p><ul><li><strong>全局执行上下文</strong>：只有一个，浏览器中的全局对象就是 window 对象，this 指向这个全局对象。</li><li><strong>函数执行上下文</strong>：存在无数个，只有在函数被调用的时候才会被创建，每次调用函数都会创建一个新的执行上下文。</li><li><strong>Eval 函数执行上下文</strong>：指的是运行在 eval 函数中的代码，很少用而且不建议使用。</li></ul><h2 id="02-执行栈"><a href="#02-执行栈" class="headerlink" title="02 执行栈"></a>02 执行栈</h2><p>执行栈，也叫调用栈，具有 LIFO（后进先出）结构，用于存储在代码执行期间创建的所有执行上下文。</p><p>首次运行JS代码时，会创建一个全局执行上下文并Push到当前的执行栈中。每当发生函数调用，引擎都会为该函数创建一个新的函数执行上下文并Push到当前执行栈的栈顶。</p><p>根据执行栈LIFO规则，当栈顶函数运行完成后，其对应的函数执行上下文将会从执行栈中Pop出，上下文控制权将移到当前执行栈的下一个执行上下文。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">'Hello World!'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">first</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Inside first function'</span>);  </span><br><span class="line">  second();  </span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Again inside first function'</span>);  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">second</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Inside second function'</span>);  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">first();  </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Inside Global Execution Context'</span>);</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/execution-stack.jpg" alt="执行栈" title="">                </div>                <div class="image-caption">执行栈</div>            </figure><h2 id="03执行上下文的创建"><a href="#03执行上下文的创建" class="headerlink" title="03执行上下文的创建"></a>03执行上下文的创建</h2><p>执行上下文分两个阶段创建：</p><ol><li>创建阶段</li><li>执行阶段</li></ol><h3 id="创建阶段"><a href="#创建阶段" class="headerlink" title="创建阶段"></a>创建阶段</h3><p>创建阶段一共三个步骤：</p><ol><li>确定 this 的值，也被称为 <strong>This Binding</strong>。</li><li><strong>词法环境（LexicalEnvironment）</strong> 组件被创建。</li><li><strong>变量环境（VariableEnvironment）</strong> 组件被创建。</li></ol><p><strong><font style="color: #ff4081;">This Binding</font></strong></p><ul><li>全局执行上下文中，this 的值指向全局对象，在浏览器中 this 的值指向 <code>window对象</code>，而在 nodejs 中指向这个文件的 <code>module对象</code>。</li><li>函数执行上下文中，this 的值取决于函数的调用方式。具体有：默认绑定、隐式绑定、显式绑定（硬绑定）、new绑定、箭头函数等。</li></ul><p><strong><font style="color: #ff4081;">词法环境（LexicalEnvironment）</font></strong></p><p>词法环境由两个组成部分：</p><ul><li><strong>环境记录</strong>：存储变量和函数声明的实际位置</li><li><strong>对外部环境的引用</strong>：可以访问其外部词法环境</li></ul><p>词法环境有两种情况：</p><ul><li><p><strong>全局环境</strong>：在全局环境下，词法环境对其外部环境引用为 null。拥有一个全局对象（window 对象）及其关联的方法和属性（例如数组方法）以及任何用户自定义的全局变量，this 的值指向这个全局对象。</p></li><li><p><strong>函数环境</strong>：用户在函数中定义的变量被存储在环境记录中，包含了arguments 对象。对外部环境的引用可以是全局环境，也可以是包含内部函数的外部函数环境。</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 伪代码</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局执行上下文</span></span><br><span class="line">GlobalExectionContext = &#123;  </span><br><span class="line">  LexicalEnvironment: &#123;      <span class="comment">// 词法环境</span></span><br><span class="line">    EnvironmentRecord: &#123;   <span class="comment">// 环境记录</span></span><br><span class="line">      Type: <span class="string">"Object"</span>,</span><br><span class="line">      <span class="comment">// 标识符绑定在这里</span></span><br><span class="line">      outer: <span class="xml"><span class="tag">&lt;<span class="name">null</span>&gt;</span>       // 对外部环境的引用</span></span><br><span class="line"><span class="xml">  &#125;  </span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">// 函数执行上下文</span></span><br><span class="line"><span class="xml">FunctionExectionContext = &#123;</span></span><br><span class="line"><span class="xml">  LexicalEnvironment: &#123;      // 词法环境</span></span><br><span class="line"><span class="xml">    EnvironmentRecord: &#123;  // 环境记录</span></span><br><span class="line"><span class="xml">      Type: "Declarative",</span></span><br><span class="line"><span class="xml">      // 标识符绑定在这里   </span></span><br><span class="line">      outer: &lt;Global or outer function environment reference&gt;  // 对外部环境的引用</span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><font style="color: #ff4081;">变量环境（VariableEnvironment）</font></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;执行上下文是当前 JavaScript 代码被解析和执行时所在环境的抽象概念。&lt;/p&gt;
&lt;h2 id=&quot;01-执行上下文的类型&quot;&gt;&lt;a href=&quot;#01-执行上下文的类型&quot; class=&quot;headerlink&quot; title=&quot;01 执行上下文的类型&quot;&gt;&lt;/a&gt;01 执行上
      
    
    </summary>
    
    
      <category term="V8引擎工作原理" scheme="http://yoursite.com/categories/V8%E5%BC%95%E6%93%8E%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/"/>
    
    
  </entry>
  
  <entry>
    <title>浏览器的原理相关知识点</title>
    <link href="http://yoursite.com/2021/08/06/browser/"/>
    <id>http://yoursite.com/2021/08/06/browser/</id>
    <published>2021-08-06T01:26:44.086Z</published>
    <updated>2021-12-03T01:41:57.461Z</updated>
    
    <content type="html"><![CDATA[<h2 id="01-前言"><a href="#01-前言" class="headerlink" title="01 前言"></a>01 前言</h2><p>作为一个合格的前端工程师，浏览器相关的工作原理是我们进行性能优化的基石，了解浏览器原理也是前端系统知识体系中的重要一环。</p><p>本文内容将会囊括<code>浏览器的缓存</code>，<code>浏览器的访问流程</code>，<code>浏览器的本地存储</code>，<code>浏览器的安全问题</code>，<code>浏览器的跨域问题</code>，<code>HTTP/HTTPS/TCP/IP/UDP的区别</code></p><h2 id="02-目录"><a href="#02-目录" class="headerlink" title="02 目录"></a>02 目录</h2><ul><li>常见浏览器内核</li><li>浏览器的主要组成</li><li><a href="https://stupidfoxy.github.io/2020/08/10/browser-cache/" target="_blank" rel="noopener">浏览器的缓存</a></li><li><a href="https://stupidfoxy.github.io/2020/08/10/browser-access/" target="_blank" rel="noopener">浏览器的访问流程</a></li><li><a href="">浏览器的本地存储</a></li><li>浏览器的安全问题<ul><li><a href="https://stupidfoxy.github.io/2020/07/29/xss/" target="_blank" rel="noopener">XSS攻击</a></li><li><a href="https://stupidfoxy.github.io/2020/07/30/csrf/" target="_blank" rel="noopener">CSRF攻击</a></li></ul></li><li><a href="https://stupidfoxy.github.io/2020/07/24/cross-origin/" target="_blank" rel="noopener">浏览器的跨域问题</a></li><li><a href="">HTTP/HTTPS/TCP/IP/UDP的区别</a></li></ul><h2 id="03-常见浏览器内核"><a href="#03-常见浏览器内核" class="headerlink" title="03 常见浏览器内核"></a>03 常见浏览器内核</h2><table><thead><tr><th>浏览器/RunTime</th><th>内核（渲染引擎）</th></tr></thead><tbody><tr><td>Chrome</td><td>webkit -&gt; blink</td></tr><tr><td>FireFox</td><td>Gecko</td></tr><tr><td>Safari</td><td>Webkit</td></tr><tr><td>IE</td><td>Trident</td></tr><tr><td>Edge</td><td>EdgeHTML</td></tr><tr><td>Opera</td><td>Presto -&gt; blink</td></tr></tbody></table><h2 id="04-浏览器的主要组成"><a href="#04-浏览器的主要组成" class="headerlink" title="04 浏览器的主要组成"></a>04 浏览器的主要组成</h2><ul><li><strong>「用户界面」</strong> - 包括地址栏、前进/后退按钮、书签菜单等。</li><li><strong>「浏览器引擎」</strong> - 在用户界面和呈现引擎之间传送指令。</li><li><strong>「呈现引擎」</strong> - 负责显示请求的内容。如果请求的内容是 HTML，它就负责解析 HTML 和 CSS 内容，并将解析后的内容显示在屏幕上。</li><li><strong>「网络」</strong> - 用于网络调用，比如 HTTP 请求。「用户界面后端」 -用于绘制基本的窗口小部件，比如组合框和窗口。</li><li><strong>「JavaScript 解释器」</strong>- 用于解析和执行 JavaScript 代码。</li><li><strong>「数据存储」</strong> - 这是持久层。浏览器需要在硬盘上保存各种数据，例如 Cookie。新的 HTML 规范 (HTML5) 定义了“网络数据库”，这是一个完整（但是轻便）的浏览器内数据库。</li></ul><blockquote><p>值得注意的是，和大多数浏览器不同，Chrome 浏览器的每个标签页都分别对应一个呈现引擎实例。每个标签页都是一个独立的进程。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;01-前言&quot;&gt;&lt;a href=&quot;#01-前言&quot; class=&quot;headerlink&quot; title=&quot;01 前言&quot;&gt;&lt;/a&gt;01 前言&lt;/h2&gt;&lt;p&gt;作为一个合格的前端工程师，浏览器相关的工作原理是我们进行性能优化的基石，了解浏览器原理也是前端系统知识体系中的重要一
      
    
    </summary>
    
    
      <category term="浏览器" scheme="http://yoursite.com/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    
      <category term="浏览器工作原理" scheme="http://yoursite.com/tags/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>谈谈闭包的知识点</title>
    <link href="http://yoursite.com/2021/08/06/closure/"/>
    <id>http://yoursite.com/2021/08/06/closure/</id>
    <published>2021-08-06T01:26:44.086Z</published>
    <updated>2021-08-06T02:02:24.607Z</updated>
    
    <content type="html"><![CDATA[<h2 id="01-前言"><a href="#01-前言" class="headerlink" title="01 前言"></a>01 前言</h2><p>闭包知识点是很基础的，是面试的基础题。忙着去学习前端框架等其他技术，却常常忘记了最基础的内容。本篇文章简单介绍了什么是闭包，以及闭包的优缺点。</p><h2 id="02-什么是闭包"><a href="#02-什么是闭包" class="headerlink" title="02 什么是闭包"></a>02 什么是闭包</h2><p><strong><font style="color: #ff4081;">闭包</font></strong>：函数A内部有函数B，函数B可以访问函数A的变量，那么函数B就是闭包。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">123</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">B</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(a) <span class="comment">//123</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> B()</span><br><span class="line">&#125;</span><br><span class="line">A()();</span><br></pre></td></tr></table></figure><h2 id="03-闭包的特性以及优缺点"><a href="#03-闭包的特性以及优缺点" class="headerlink" title="03 闭包的特性以及优缺点"></a>03 闭包的特性以及优缺点</h2><p><strong><font style="color: #ff4081;">闭包特性：</font></strong></p><ol><li>函数嵌套函数</li><li>子函数内部可以调用外部父函数的变量和参数</li><li>当父函数执行完毕时，被子函数调用到的参数和变量不会被垃圾回收机制回收</li></ol><p><strong><font style="color: #ff4081;">闭包的优点：</font></strong></p><ol><li>可读取函数内部的变量</li><li>局部变量可以保存在内存中，实现数据共享</li><li>执行过程所有变量都匿名在函数内部</li></ol><p><strong><font style="color: #ff4081;">闭包的缺点：</font></strong></p><ol><li>局部变量长期存在内存中，内存消耗大</li><li>滥用闭包可能会导致内存泄漏</li><li>闭包可以在父函数外部改变父函数内部的值</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;01-前言&quot;&gt;&lt;a href=&quot;#01-前言&quot; class=&quot;headerlink&quot; title=&quot;01 前言&quot;&gt;&lt;/a&gt;01 前言&lt;/h2&gt;&lt;p&gt;闭包知识点是很基础的，是面试的基础题。忙着去学习前端框架等其他技术，却常常忘记了最基础的内容。本篇文章简单介绍了什么
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="易考点" scheme="http://yoursite.com/tags/%E6%98%93%E8%80%83%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>函数的防抖与节流</title>
    <link href="http://yoursite.com/2020/12/03/debounce-throttle/"/>
    <id>http://yoursite.com/2020/12/03/debounce-throttle/</id>
    <published>2020-12-03T08:48:30.000Z</published>
    <updated>2021-09-10T02:56:58.088Z</updated>
    
    <content type="html"><![CDATA[<h2 id="01-前言"><a href="#01-前言" class="headerlink" title="01 前言"></a>01 前言</h2><p>防抖和节流严格算起来应该属于性能优化的知识，但实际在开发过程中频率还是相当高的，放任不管或者处理不当就容易引起浪费计算机资源，降低程序运行速度，甚至造成浏览器卡死、崩溃。这种问题显然是致命的。</p><h2 id="02-场景举例：input框搜索"><a href="#02-场景举例：input框搜索" class="headerlink" title="02 场景举例：input框搜索"></a>02 场景举例：input框搜索</h2><p>input框搜索是一个很多网站都常见的功能，输入内容即刻就显示搜索结果。</p><p><strong>「实现」</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">'#search'</span>).addEventListener(<span class="string">"input"</span>,search());</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">search</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'search:'</span>+<span class="built_in">Math</span>.random())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在运行时我们会发现，search函数的执行频率太高了，每次输入都会触发。但绝大多数时候我们都是在输入的过程中，并非是我们想要搜索的内容。因此我们就需要优化这种使用场景。</p><h2 id="03-防抖"><a href="#03-防抖" class="headerlink" title="03 防抖"></a>03 防抖</h2><p>防抖（debounce），就是指触发事件后，在 n 秒内函数只能执行一次，如果触发事件后在 n 秒内又触发了事件，则会重新计算函数延执行时间。</p><p>基于上述场景，我们需要给出一个期限值，如200ms：</p><ul><li>如果在200ms内没有再次触发输入事件，那么就执行搜索功能</li><li>如果再200ms内再次触发了输入事件，那么就取消当前计时，重新开始计时</li></ul><p><strong>「实现」</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">'#search'</span>).addEventListener(<span class="string">"input"</span>,debounce(search,<span class="number">200</span>));</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">fn,delay</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> timer = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(timer)&#123;</span><br><span class="line">      clearTimeout(timer);</span><br><span class="line">    &#125;</span><br><span class="line">    timer = setTimeout(fn,delay);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">search</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">Math</span>.random());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="04-节流"><a href="#04-节流" class="headerlink" title="04 节流"></a>04 节流</h2><p>节流（throttle），就是指触发事件后，在 n 秒内函数只能执行一次，如果触发事件后在 n 秒内又触发了事件，则会无效。</p><p>基于上述防抖的效果看，如果用户一直不停的触发输入事件，理论上就永远不会进行搜索功能。</p><p>那么我们就需要考虑另一种方案，同样是200ms的期望值：</p><ul><li>在持续触发输入事件时，每隔200ms就会执行一次搜索功能</li></ul><p><strong>「实现」</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">'#search'</span>).addEventListener(<span class="string">"input"</span>,throttle(search,<span class="number">200</span>));</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">fn,delay</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> valid = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!valid)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    valid = <span class="literal">false</span></span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">      fn();</span><br><span class="line">      valid = <span class="literal">true</span>;</span><br><span class="line">    &#125;,delay)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">search</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">Math</span>.random());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;01-前言&quot;&gt;&lt;a href=&quot;#01-前言&quot; class=&quot;headerlink&quot; title=&quot;01 前言&quot;&gt;&lt;/a&gt;01 前言&lt;/h2&gt;&lt;p&gt;防抖和节流严格算起来应该属于性能优化的知识，但实际在开发过程中频率还是相当高的，放任不管或者处理不当就容易引起浪费计
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="易考点" scheme="http://yoursite.com/tags/%E6%98%93%E8%80%83%E7%82%B9/"/>
    
      <category term="应用" scheme="http://yoursite.com/tags/%E5%BA%94%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>JS获取屏幕的宽高</title>
    <link href="http://yoursite.com/2020/10/30/screen-width-height/"/>
    <id>http://yoursite.com/2020/10/30/screen-width-height/</id>
    <published>2020-10-30T06:40:55.000Z</published>
    <updated>2021-09-10T02:57:18.107Z</updated>
    
    <content type="html"><![CDATA[<h2 id="01-前言"><a href="#01-前言" class="headerlink" title="01 前言"></a>01 前言</h2><p>JS获取屏幕的宽高，主要跟JS的offset、client、scroll属性有关，他们各自有何区别，本文将详细介绍。</p><h2 id="02-offset家族"><a href="#02-offset家族" class="headerlink" title="02 offset家族"></a>02 offset家族</h2><p>​偏移量(offset dimension)是javascript中的一个重要的概念。涉及到偏移量的主要是<code>offsetLeft</code>、<code>offsetTop</code>、<code>offsetHeight</code>、<code>offsetWidth</code>这四个属性。当然，还有一个偏移参照——定位父级<code>offsetParent</code>。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/offset.png" alt="offset家族" title="">                </div>                <div class="image-caption">offset家族</div>            </figure><h3 id="offsetParent"><a href="#offsetParent" class="headerlink" title="offsetParent"></a>offsetParent</h3><p>​offsetParent（定位父级）的定义是：与当前元素最近的经过定位(position不等于static)的父级元素，主要分为下列几种情况：</p><ol><li>元素自身有<code>fixed</code>定位，offsetParent的结果为<code>null</code></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"test"</span> <span class="attr">style</span>=<span class="string">"position:fixed"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> test = <span class="built_in">document</span>.getElementById(<span class="string">'test'</span>);</span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(test.offsetParent);</span></span><br><span class="line"><span class="actionscript">  <span class="comment">//firefox并没有考虑固定定位的问题，返回&lt;body&gt;，其他浏览器都返回null</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>元素自身无fixed定位，offsetParent为离该元素最近的<strong>进行过定位的</strong>父元素，如果其父元素不存在，定位父级则为<code>&lt;body&gt;</code></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"grandfather"</span> <span class="attr">style</span>=<span class="string">"position: relative;"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"father"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"test1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"test2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> test1 = <span class="built_in">document</span>.getElementById(<span class="string">'test1'</span>);</span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(test1.offsetParent);<span class="comment">//&lt;div id="grandfather"&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> test2 = <span class="built_in">document</span>.getElementById(<span class="string">'test2'</span>);</span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(test2.offsetParent);<span class="comment">//&lt;body&gt;</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li><code>&lt;body&gt;</code>元素的offsetParent是<code>null</code></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">document</span>.body.offsetParent);<span class="comment">//null</span></span><br></pre></td></tr></table></figure><h3 id="offsetWidth"><a href="#offsetWidth" class="headerlink" title="offsetWidth"></a>offsetWidth</h3><p>​offsetWidth表示元素在水平方向上占用的空间大小，无单位(以像素px计)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">offsetWidth =  border-left-width + padding-left + width + padding-right + border-right-width;</span><br></pre></td></tr></table></figure><h3 id="offsetHeight"><a href="#offsetHeight" class="headerlink" title="offsetHeight"></a>offsetHeight</h3><p>offsetHeight表示元素在垂直方向上占用的空间大小，无单位(以像素px计)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">offsetHeight =  border-top-width + padding-top + height + padding-bottom + border-bottom-width</span><br></pre></td></tr></table></figure><h3 id="offsetTop"><a href="#offsetTop" class="headerlink" title="offsetTop"></a>offsetTop</h3><p>offsetTop表示元素的上外边框至offsetParent元素的上内边框之间的像素距离</p><h3 id="offsetLeft"><a href="#offsetLeft" class="headerlink" title="offsetLeft"></a>offsetLeft</h3><p>offsetLeft表示元素的左外边框至offsetParent元素的左内边框之间的像素距离</p><h2 id="03-client家族"><a href="#03-client家族" class="headerlink" title="03 client家族"></a>03 client家族</h2><p>client（客户区域）指的是元素内容及其内边距所占据的空间大小。家族成员主要有<code>clientWidth</code>,<code>clientHeight</code>,<code>clientTop</code>,<code>clientLeft</code>。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/client.png" alt="client家族" title="">                </div>                <div class="image-caption">client家族</div>            </figure><h3 id="clientWidth"><a href="#clientWidth" class="headerlink" title="clientWidth"></a>clientWidth</h3><p>clientWidth属性返回元素节点的客户区宽度</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clientWidth = padding-left + width + padding-right</span><br></pre></td></tr></table></figure><h3 id="clientHeight"><a href="#clientHeight" class="headerlink" title="clientHeight"></a>clientHeight</h3><p>clientHeight属性返回元素节点的客户区高度</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clientHeight = padding-top + height + padding-bottom</span><br></pre></td></tr></table></figure><h3 id="clientTop"><a href="#clientTop" class="headerlink" title="clientTop"></a>clientTop</h3><p>clientTop属性返回上边框的宽度</p><h3 id="clientLeft"><a href="#clientLeft" class="headerlink" title="clientLeft"></a>clientLeft</h3><p>clientLeft属性返回左边框的宽度</p><h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><ol><li>页面大小<br>常用document.documentElement的client属性来表示页面大小(不包含滚动条宽度)</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.documentElement.clientWidth <span class="comment">//可见区域宽度  </span></span><br><span class="line"><span class="built_in">document</span>.documentElement.clientHeight <span class="comment">//可见区域高度</span></span><br></pre></td></tr></table></figure><ol start="2"><li>所有的client属性都是只读的</li><li>如果给元素设置了display:none，则客户区client属性都为0</li><li>每次访问客户区client属性都需要重新计算，重复访问需要耗费大量的性能，所以要尽量避免重复访问这些属性。</li></ol><h2 id="04-scroll家族"><a href="#04-scroll家族" class="headerlink" title="04 scroll家族"></a>04 scroll家族</h2><p>scroll顾名思义与滚动相关，同样家族包括<code>scrollWidth</code>,<code>scrollHeight</code>,<code>scrollTop</code>,<code>scrollLeft</code>。</p><h3 id="scrollWidth"><a href="#scrollWidth" class="headerlink" title="scrollWidth"></a>scrollWidth</h3><p>scrollWidth表示元素的总宽度，包括由于溢出而无法展示在网页的不可见部分。没有滚动条时，scrollWidth与clientWidth属性结果相等</p><h3 id="scrollHeight"><a href="#scrollHeight" class="headerlink" title="scrollHeight"></a>scrollHeight</h3><p>scrollHeight表示元素的总高度，包括由于溢出而无法展示在网页的不可见部分。没有滚动条时，scrollHeight与clientHeight属性结果相等</p><h3 id="scrollTop"><a href="#scrollTop" class="headerlink" title="scrollTop"></a>scrollTop</h3><p>scrollTop属性表示被隐藏在内容区域上方的像素数。元素未滚动时，scrollTop的值为0，如果元素被垂直滚动了，scrollTop的值大于0，表示元素上方不可见内容的像素高度。<br>当滚动条滚动到内容底部时，符合以下等式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrollHeight = scrollTop + clientHight</span><br></pre></td></tr></table></figure><h3 id="scrollLeft"><a href="#scrollLeft" class="headerlink" title="scrollLeft"></a>scrollLeft</h3><p>scrollLeft属性表示被隐藏在内容区域左侧的像素数。元素未滚动时，scrollLeft的值为0，如果元素被水平滚动了，scrollLeft的值大于0，且表示元素左侧不可见内容的像素宽度。<br>与scrollHeight和scrollWidth属性不同的是，scrollLeft和scrollTop是<strong>可写的</strong>。</p><h3 id="应用：回到顶部"><a href="#应用：回到顶部" class="headerlink" title="应用：回到顶部"></a>应用：回到顶部</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> backTop = <span class="built_in">document</span>.getElementById(<span class="string">'backTop'</span>);</span><br><span class="line">backTop.onclick = scrollTop;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">scrollTop</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">//兼容性写法</span></span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">document</span>.documentElement.scrollTop || <span class="built_in">document</span>.body.scrollTop)&#123;</span><br><span class="line">    <span class="built_in">document</span>.documentElement.scrollTop = <span class="built_in">document</span>.body.scrollTop = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="应用：scrollTo-方法"><a href="#应用：scrollTo-方法" class="headerlink" title="应用：scrollTo()方法"></a>应用：scrollTo()方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> backTop = <span class="built_in">document</span>.getElementById(<span class="string">'backTop'</span>);</span><br><span class="line">backTop.onclick = scrollTop;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">scrollTop</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  scrollTo(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;01-前言&quot;&gt;&lt;a href=&quot;#01-前言&quot; class=&quot;headerlink&quot; title=&quot;01 前言&quot;&gt;&lt;/a&gt;01 前言&lt;/h2&gt;&lt;p&gt;JS获取屏幕的宽高，主要跟JS的offset、client、scroll属性有关，他们各自有何区别，本文将详细介绍。
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="应用" scheme="http://yoursite.com/tags/%E5%BA%94%E7%94%A8/"/>
    
      <category term="转载" scheme="http://yoursite.com/tags/%E8%BD%AC%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>ES6数组的扩展</title>
    <link href="http://yoursite.com/2020/10/30/es6-array/"/>
    <id>http://yoursite.com/2020/10/30/es6-array/</id>
    <published>2020-10-30T02:18:13.000Z</published>
    <updated>2021-12-03T01:42:52.171Z</updated>
    
    <content type="html"><![CDATA[<h2 id="01-扩展运算符"><a href="#01-扩展运算符" class="headerlink" title="01 扩展运算符"></a>01 扩展运算符</h2><h3 id="含义"><a href="#含义" class="headerlink" title="含义"></a>含义</h3><p>扩展运算符（spread）是三个点（<code>...</code>）。它好比 rest 参数的逆运算，将一个数组转为用逗号分隔的参数序列。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(...[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"><span class="comment">// 1 2 3</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>, ...[<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], <span class="number">5</span>)</span><br><span class="line"><span class="comment">// 1 2 3 4 5</span></span><br><span class="line"></span><br><span class="line">[...document.querySelectorAll(<span class="string">'div'</span>)]</span><br><span class="line"><span class="comment">// [&lt;div&gt;, &lt;div&gt;, &lt;div&gt;]</span></span><br></pre></td></tr></table></figure><p>该运算符主要用于函数调用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">push</span>(<span class="params">array, ...items</span>) </span>&#123;</span><br><span class="line">  array.push(...items);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> numbers = [<span class="number">4</span>, <span class="number">38</span>];</span><br><span class="line">add(...numbers) <span class="comment">// 42</span></span><br></pre></td></tr></table></figure><p>上面代码中，<code>array.push(...items)</code>和<code>add(...numbers)</code>这两行，都是函数的调用，它们都使用了扩展运算符。该运算符将一个数组，变为参数序列。</p><p>扩展运算符与正常的函数参数可以结合使用，非常灵活。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">v, w, x, y, z</span>) </span>&#123; &#125;</span><br><span class="line"><span class="keyword">const</span> args = [<span class="number">0</span>, <span class="number">1</span>];</span><br><span class="line">f(<span class="number">-1</span>, ...args, <span class="number">2</span>, ...[<span class="number">3</span>]);</span><br></pre></td></tr></table></figure><p>扩展运算符后面还可以放置表达式。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [</span><br><span class="line">  ...(x &gt; <span class="number">0</span> ? [<span class="string">'a'</span>] : []),</span><br><span class="line">  <span class="string">'b'</span>,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>如果扩展运算符后面是一个空数组，则不产生任何效果。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[...[], <span class="number">1</span>]</span><br><span class="line"><span class="comment">// [1]</span></span><br></pre></td></tr></table></figure><p>注意，只有函数调用时，扩展运算符才可以放在圆括号中，否则会报错。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(...[<span class="number">1</span>, <span class="number">2</span>])</span><br><span class="line"><span class="comment">// Uncaught SyntaxError: Unexpected number</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log((...[<span class="number">1</span>, <span class="number">2</span>]))</span><br><span class="line"><span class="comment">// Uncaught SyntaxError: Unexpected number</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(...[<span class="number">1</span>, <span class="number">2</span>])</span><br><span class="line"><span class="comment">// 1 2</span></span><br></pre></td></tr></table></figure><p>上面三种情况，扩展运算符都放在圆括号里面，但是前两种情况会报错，因为扩展运算符所在的括号不是函数调用。</p><h3 id="替代函数的-apply-方法"><a href="#替代函数的-apply-方法" class="headerlink" title="替代函数的 apply 方法"></a>替代函数的 apply 方法</h3><p>由于扩展运算符可以展开数组，所以不再需要<code>apply</code>方法，将数组转为函数的参数了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES5 的写法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x, y, z</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> args = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line">f.apply(<span class="literal">null</span>, args);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6的写法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x, y, z</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> args = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line">f(...args);</span><br></pre></td></tr></table></figure><p>下面是扩展运算符取代<code>apply</code>方法的一个实际的例子，应用<code>Math.max</code>方法，简化求出一个数组最大元素的写法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES5 的写法</span></span><br><span class="line"><span class="built_in">Math</span>.max.apply(<span class="literal">null</span>, [<span class="number">14</span>, <span class="number">3</span>, <span class="number">77</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6 的写法</span></span><br><span class="line"><span class="built_in">Math</span>.max(...[<span class="number">14</span>, <span class="number">3</span>, <span class="number">77</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="built_in">Math</span>.max(<span class="number">14</span>, <span class="number">3</span>, <span class="number">77</span>);</span><br></pre></td></tr></table></figure><p>上面代码中，由于 JavaScript 不提供求数组最大元素的函数，所以只能套用<code>Math.max</code>函数，将数组转为一个参数序列，然后求最大值。有了扩展运算符以后，就可以直接用<code>Math.max</code>了。</p><p>另一个例子是通过<code>push</code>函数，将一个数组添加到另一个数组的尾部。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES5的 写法</span></span><br><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="built_in">Array</span>.prototype.push.apply(arr1, arr2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6 的写法</span></span><br><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">arr1.push(...arr2);</span><br></pre></td></tr></table></figure><p>上面代码的 ES5 写法中，<code>push</code>方法的参数不能是数组，所以只好通过<code>apply</code>方法变通使用<code>push</code>方法。有了扩展运算符，就可以直接将数组传入<code>push</code>方法。</p><p>下面是另外一个例子。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES5</span></span><br><span class="line"><span class="keyword">new</span> (<span class="built_in">Date</span>.bind.apply(<span class="built_in">Date</span>, [<span class="literal">null</span>, <span class="number">2015</span>, <span class="number">1</span>, <span class="number">1</span>]))</span><br><span class="line"><span class="comment">// ES6</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>(...[<span class="number">2015</span>, <span class="number">1</span>, <span class="number">1</span>]);</span><br></pre></td></tr></table></figure><h3 id="扩展运算符的应用"><a href="#扩展运算符的应用" class="headerlink" title="扩展运算符的应用"></a>扩展运算符的应用</h3><p><strong>（1）复制数组</strong></p><p>数组是复合的数据类型，直接复制的话，只是复制了指向底层数据结构的指针，而不是克隆一个全新的数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a1 = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">const</span> a2 = a1;</span><br><span class="line"></span><br><span class="line">a2[<span class="number">0</span>] = <span class="number">2</span>;</span><br><span class="line">a1 <span class="comment">// [2, 2]</span></span><br></pre></td></tr></table></figure><p>上面代码中，<code>a2</code>并不是<code>a1</code>的克隆，而是指向同一份数据的另一个指针。修改<code>a2</code>，会直接导致<code>a1</code>的变化。</p><p>ES5 只能用变通方法来复制数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a1 = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">const</span> a2 = a1.concat();</span><br><span class="line"></span><br><span class="line">a2[<span class="number">0</span>] = <span class="number">2</span>;</span><br><span class="line">a1 <span class="comment">// [1, 2]</span></span><br></pre></td></tr></table></figure><p>上面代码中，<code>a1</code>会返回原数组的克隆，再修改<code>a2</code>就不会对<code>a1</code>产生影响。</p><p>扩展运算符提供了复制数组的简便写法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a1 = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="comment">// 写法一</span></span><br><span class="line"><span class="keyword">const</span> a2 = [...a1];</span><br><span class="line"><span class="comment">// 写法二</span></span><br><span class="line"><span class="keyword">const</span> [...a2] = a1;</span><br></pre></td></tr></table></figure><p>上面的两种写法，<code>a2</code>都是<code>a1</code>的克隆。</p><p><strong>（2）合并数组</strong></p><p>扩展运算符提供了数组合并的新写法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr1 = [<span class="string">'a'</span>, <span class="string">'b'</span>];</span><br><span class="line"><span class="keyword">const</span> arr2 = [<span class="string">'c'</span>];</span><br><span class="line"><span class="keyword">const</span> arr3 = [<span class="string">'d'</span>, <span class="string">'e'</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES5 的合并数组</span></span><br><span class="line">arr1.concat(arr2, arr3);</span><br><span class="line"><span class="comment">// [ 'a', 'b', 'c', 'd', 'e' ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6 的合并数组</span></span><br><span class="line">[...arr1, ...arr2, ...arr3]</span><br><span class="line"><span class="comment">// [ 'a', 'b', 'c', 'd', 'e' ]</span></span><br></pre></td></tr></table></figure><p>不过，这两种方法都是浅拷贝，使用的时候需要注意。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a1 = [&#123; <span class="attr">foo</span>: <span class="number">1</span> &#125;];</span><br><span class="line"><span class="keyword">const</span> a2 = [&#123; <span class="attr">bar</span>: <span class="number">2</span> &#125;];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> a3 = a1.concat(a2);</span><br><span class="line"><span class="keyword">const</span> a4 = [...a1, ...a2];</span><br><span class="line"></span><br><span class="line">a3[<span class="number">0</span>] === a1[<span class="number">0</span>] <span class="comment">// true</span></span><br><span class="line">a4[<span class="number">0</span>] === a1[<span class="number">0</span>] <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>上面代码中，<code>a3</code>和<code>a4</code>是用两种不同方法合并而成的新数组，但是它们的成员都是对原数组成员的引用，这就是浅拷贝。如果修改了引用指向的值，会同步反映到新数组。</p><p><strong>（3）与解构赋值结合</strong></p><p>扩展运算符可以与解构赋值结合起来，用于生成数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES5</span></span><br><span class="line">a = list[<span class="number">0</span>], rest = list.slice(<span class="number">1</span>)</span><br><span class="line"><span class="comment">// ES6</span></span><br><span class="line">[a, ...rest] = list</span><br></pre></td></tr></table></figure><p>下面是另外一些例子。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [first, ...rest] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">first <span class="comment">// 1</span></span><br><span class="line">rest  <span class="comment">// [2, 3, 4, 5]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> [first, ...rest] = [];</span><br><span class="line">first <span class="comment">// undefined</span></span><br><span class="line">rest  <span class="comment">// []</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> [first, ...rest] = [<span class="string">"foo"</span>];</span><br><span class="line">first  <span class="comment">// "foo"</span></span><br><span class="line">rest   <span class="comment">// []</span></span><br></pre></td></tr></table></figure><p>如果将扩展运算符用于数组赋值，只能放在参数的最后一位，否则会报错。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [...butLast, last] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="comment">// 报错</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> [first, ...middle, last] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="comment">// 报错</span></span><br></pre></td></tr></table></figure><p><strong>（4）字符串</strong></p><p>扩展运算符还可以将字符串转为真正的数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[...<span class="string">'hello'</span>]</span><br><span class="line"><span class="comment">// [ "h", "e", "l", "l", "o" ]</span></span><br></pre></td></tr></table></figure><p>上面的写法，有一个重要的好处，那就是能够正确识别四个字节的 Unicode 字符。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'x\uD83D\uDE80y'</span>.length <span class="comment">// 4</span></span><br><span class="line">[...<span class="string">'x\uD83D\uDE80y'</span>].length <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p>上面代码的第一种写法，JavaScript 会将四个字节的 Unicode 字符，识别为 2 个字符，采用扩展运算符就没有这个问题。因此，正确返回字符串长度的函数，可以像下面这样写。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">length</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [...str].length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">length(<span class="string">'x\uD83D\uDE80y'</span>) <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p>凡是涉及到操作四个字节的 Unicode 字符的函数，都有这个问题。因此，最好都用扩展运算符改写。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">'x\uD83D\uDE80y'</span>;</span><br><span class="line"></span><br><span class="line">str.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>)</span><br><span class="line"><span class="comment">// 'y\uDE80\uD83Dx'</span></span><br><span class="line"></span><br><span class="line">[...str].reverse().join(<span class="string">''</span>)</span><br><span class="line"><span class="comment">// 'y\uD83D\uDE80x'</span></span><br></pre></td></tr></table></figure><p>上面代码中，如果不用扩展运算符，字符串的<code>reverse</code>操作就不正确。</p><p><strong>（5）实现了 Iterator 接口的对象</strong></p><p>任何定义了遍历器（Iterator）接口的对象（参阅 Iterator 一章），都可以用扩展运算符转为真正的数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> nodeList = <span class="built_in">document</span>.querySelectorAll(<span class="string">'div'</span>);</span><br><span class="line"><span class="keyword">let</span> array = [...nodeList];</span><br></pre></td></tr></table></figure><p>上面代码中，<code>querySelectorAll</code>方法返回的是一个<code>NodeList</code>对象。它不是数组，而是一个类似数组的对象。这时，扩展运算符可以将其转为真正的数组，原因就在于<code>NodeList</code>对象实现了 Iterator 。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Number</span>.prototype[<span class="built_in">Symbol</span>.iterator] = <span class="function"><span class="keyword">function</span>*(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> num = <span class="keyword">this</span>.valueOf();</span><br><span class="line">  <span class="keyword">while</span> (i &lt; num) &#123;</span><br><span class="line">    <span class="keyword">yield</span> i++;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log([..<span class="number">.5</span>]) <span class="comment">// [0, 1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure><p>上面代码中，先定义了<code>Number</code>对象的遍历器接口，扩展运算符将<code>5</code>自动转成<code>Number</code>实例以后，就会调用这个接口，就会返回自定义的结果。</p><p>对于那些没有部署 Iterator 接口的类似数组的对象，扩展运算符就无法将其转为真正的数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arrayLike = &#123;</span><br><span class="line">  <span class="string">'0'</span>: <span class="string">'a'</span>,</span><br><span class="line">  <span class="string">'1'</span>: <span class="string">'b'</span>,</span><br><span class="line">  <span class="string">'2'</span>: <span class="string">'c'</span>,</span><br><span class="line">  length: <span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TypeError: Cannot spread non-iterable object.</span></span><br><span class="line"><span class="keyword">let</span> arr = [...arrayLike];</span><br></pre></td></tr></table></figure><p>上面代码中，<code>arrayLike</code>是一个类似数组的对象，但是没有部署 Iterator 接口，扩展运算符就会报错。这时，可以改为使用<code>Array.from</code>方法将<code>arrayLike</code>转为真正的数组。</p><p><strong>（6）Map 和 Set 结构，Generator 函数</strong></p><p>扩展运算符内部调用的是数据结构的 Iterator 接口，因此只要具有 Iterator 接口的对象，都可以使用扩展运算符，比如 Map 结构。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>([</span><br><span class="line">  [<span class="number">1</span>, <span class="string">'one'</span>],</span><br><span class="line">  [<span class="number">2</span>, <span class="string">'two'</span>],</span><br><span class="line">  [<span class="number">3</span>, <span class="string">'three'</span>],</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [...map.keys()]; <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure><p>Generator 函数运行后，返回一个遍历器对象，因此也可以使用扩展运算符。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> go = <span class="function"><span class="keyword">function</span>*(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">3</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">[...go()] <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure><p>上面代码中，变量<code>go</code>是一个 Generator 函数，执行后返回的是一个遍历器对象，对这个遍历器对象执行扩展运算符，就会将内部遍历得到的值，转为一个数组。</p><p>如果对没有 Iterator 接口的对象，使用扩展运算符，将会报错。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> arr = [...obj]; <span class="comment">// TypeError: Cannot spread non-iterable object</span></span><br></pre></td></tr></table></figure><h2 id="02-Array-from"><a href="#02-Array-from" class="headerlink" title="02 Array.from()"></a>02 Array.from()</h2><p><code>Array.from</code>方法用于将两类对象转为真正的数组：类似数组的对象（array-like object）和可遍历（iterable）的对象（包括 ES6 新增的数据结构 Set 和 Map）。</p><p>下面是一个类似数组的对象，<code>Array.from</code>将它转为真正的数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arrayLike = &#123;</span><br><span class="line">    <span class="string">'0'</span>: <span class="string">'a'</span>,</span><br><span class="line">    <span class="string">'1'</span>: <span class="string">'b'</span>,</span><br><span class="line">    <span class="string">'2'</span>: <span class="string">'c'</span>,</span><br><span class="line">    length: <span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES5的写法</span></span><br><span class="line"><span class="keyword">var</span> arr1 = [].slice.call(arrayLike); <span class="comment">// ['a', 'b', 'c']</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6的写法</span></span><br><span class="line"><span class="keyword">let</span> arr2 = <span class="built_in">Array</span>.from(arrayLike); <span class="comment">// ['a', 'b', 'c']</span></span><br></pre></td></tr></table></figure><p>实际应用中，常见的类似数组的对象是 DOM 操作返回的 NodeList 集合，以及函数内部的<code>arguments</code>对象。<code>Array.from</code>都可以将它们转为真正的数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// NodeList对象</span></span><br><span class="line"><span class="keyword">let</span> ps = <span class="built_in">document</span>.querySelectorAll(<span class="string">'p'</span>);</span><br><span class="line"><span class="built_in">Array</span>.from(ps).filter(<span class="function"><span class="params">p</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> p.textContent.length &gt; <span class="number">100</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// arguments对象</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> args = <span class="built_in">Array</span>.from(<span class="built_in">arguments</span>);</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码中，<code>querySelectorAll</code>方法返回的是一个类似数组的对象，可以将这个对象转为真正的数组，再使用<code>filter</code>方法。</p><p>只要是部署了 Iterator 接口的数据结构，<code>Array.from</code>都能将其转为数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.from(<span class="string">'hello'</span>)</span><br><span class="line"><span class="comment">// ['h', 'e', 'l', 'l', 'o']</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> namesSet = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">'a'</span>, <span class="string">'b'</span>])</span><br><span class="line"><span class="built_in">Array</span>.from(namesSet) <span class="comment">// ['a', 'b']</span></span><br></pre></td></tr></table></figure><p>上面代码中，字符串和 Set 结构都具有 Iterator 接口，因此可以被<code>Array.from</code>转为真正的数组。</p><p>如果参数是一个真正的数组，<code>Array.from</code>会返回一个一模一样的新数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.from([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"><span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure><p>值得提醒的是，扩展运算符（<code>...</code>）也可以将某些数据结构转为数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// arguments对象</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> args = [...arguments];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// NodeList对象</span></span><br><span class="line">[...document.querySelectorAll(<span class="string">'div'</span>)]</span><br></pre></td></tr></table></figure><p>扩展运算符背后调用的是遍历器接口（<code>Symbol.iterator</code>），如果一个对象没有部署这个接口，就无法转换。<code>Array.from</code>方法还支持类似数组的对象。所谓类似数组的对象，本质特征只有一点，即必须有<code>length</code>属性。因此，任何有<code>length</code>属性的对象，都可以通过<code>Array.from</code>方法转为数组，而此时扩展运算符就无法转换。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.from(&#123; <span class="attr">length</span>: <span class="number">3</span> &#125;);</span><br><span class="line"><span class="comment">// [ undefined, undefined, undefined ]</span></span><br></pre></td></tr></table></figure><p>上面代码中，<code>Array.from</code>返回了一个具有三个成员的数组，每个位置的值都是<code>undefined</code>。扩展运算符转换不了这个对象。</p><p>对于还没有部署该方法的浏览器，可以用<code>Array.prototype.slice</code>方法替代。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> toArray = <span class="function">(<span class="params">(</span>) =&gt;</span></span><br><span class="line">  <span class="built_in">Array</span>.from ? <span class="built_in">Array</span>.from : <span class="function"><span class="params">obj</span> =&gt;</span> [].slice.call(obj)</span><br><span class="line">)();</span><br></pre></td></tr></table></figure><p><code>Array.from</code>还可以接受第二个参数，作用类似于数组的<code>map</code>方法，用来对每个元素进行处理，将处理后的值放入返回的数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.from(arrayLike, x =&gt; x * x);</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="built_in">Array</span>.from(arrayLike).map(<span class="function"><span class="params">x</span> =&gt;</span> x * x);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.from([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], (x) =&gt; x * x)</span><br><span class="line"><span class="comment">// [1, 4, 9]</span></span><br></pre></td></tr></table></figure><p>下面的例子是取出一组 DOM 节点的文本内容。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> spans = <span class="built_in">document</span>.querySelectorAll(<span class="string">'span.name'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// map()</span></span><br><span class="line"><span class="keyword">let</span> names1 = <span class="built_in">Array</span>.prototype.map.call(spans, s =&gt; s.textContent);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Array.from()</span></span><br><span class="line"><span class="keyword">let</span> names2 = <span class="built_in">Array</span>.from(spans, s =&gt; s.textContent)</span><br></pre></td></tr></table></figure><p>下面的例子将数组中布尔值为<code>false</code>的成员转为<code>0</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.from([<span class="number">1</span>, , <span class="number">2</span>, , <span class="number">3</span>], (n) =&gt; n || <span class="number">0</span>)</span><br><span class="line"><span class="comment">// [1, 0, 2, 0, 3]</span></span><br></pre></td></tr></table></figure><p>另一个例子是返回各种数据的类型。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">typesOf</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Array</span>.from(<span class="built_in">arguments</span>, value =&gt; <span class="keyword">typeof</span> value)</span><br><span class="line">&#125;</span><br><span class="line">typesOf(<span class="literal">null</span>, [], <span class="literal">NaN</span>)</span><br><span class="line"><span class="comment">// ['object', 'object', 'number']</span></span><br></pre></td></tr></table></figure><p>如果<code>map</code>函数里面用到了<code>this</code>关键字，还可以传入<code>Array.from</code>的第三个参数，用来绑定<code>this</code>。</p><p><code>Array.from()</code>可以将各种值转为真正的数组，并且还提供<code>map</code>功能。这实际上意味着，只要有一个原始的数据结构，你就可以先对它的值进行处理，然后转成规范的数组结构，进而就可以使用数量众多的数组方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.from(&#123; <span class="attr">length</span>: <span class="number">2</span> &#125;, () =&gt; <span class="string">'jack'</span>)</span><br><span class="line"><span class="comment">// ['jack', 'jack']</span></span><br></pre></td></tr></table></figure><p>上面代码中，<code>Array.from</code>的第一个参数指定了第二个参数运行的次数。这种特性可以让该方法的用法变得非常灵活。</p><p><code>Array.from()</code>的另一个应用是，将字符串转为数组，然后返回字符串的长度。因为它能正确处理各种 Unicode 字符，可以避免 JavaScript 将大于<code>\uFFFF</code>的 Unicode 字符，算作两个字符的 bug。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">countSymbols</span>(<span class="params">string</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Array</span>.from(string).length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="03-Array-of"><a href="#03-Array-of" class="headerlink" title="03 Array.of()"></a>03 Array.of()</h2><p><code>Array.of</code>方法用于将一组值，转换为数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.of(<span class="number">3</span>, <span class="number">11</span>, <span class="number">8</span>) <span class="comment">// [3,11,8]</span></span><br><span class="line"><span class="built_in">Array</span>.of(<span class="number">3</span>) <span class="comment">// [3]</span></span><br><span class="line"><span class="built_in">Array</span>.of(<span class="number">3</span>).length <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>这个方法的主要目的，是弥补数组构造函数<code>Array()</code>的不足。因为参数个数的不同，会导致<code>Array()</code>的行为有差异。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>() <span class="comment">// []</span></span><br><span class="line"><span class="built_in">Array</span>(<span class="number">3</span>) <span class="comment">// [, , ,]</span></span><br><span class="line"><span class="built_in">Array</span>(<span class="number">3</span>, <span class="number">11</span>, <span class="number">8</span>) <span class="comment">// [3, 11, 8]</span></span><br></pre></td></tr></table></figure><p>上面代码中，<code>Array</code>方法没有参数、一个参数、三个参数时，返回结果都不一样。只有当参数个数不少于 2 个时，<code>Array()</code>才会返回由参数组成的新数组。参数个数只有一个时，实际上是指定数组的长度。</p><p><code>Array.of</code>基本上可以用来替代<code>Array()</code>或<code>new Array()</code>，并且不存在由于参数不同而导致的重载。它的行为非常统一。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.of() <span class="comment">// []</span></span><br><span class="line"><span class="built_in">Array</span>.of(<span class="literal">undefined</span>) <span class="comment">// [undefined]</span></span><br><span class="line"><span class="built_in">Array</span>.of(<span class="number">1</span>) <span class="comment">// [1]</span></span><br><span class="line"><span class="built_in">Array</span>.of(<span class="number">1</span>, <span class="number">2</span>) <span class="comment">// [1, 2]</span></span><br></pre></td></tr></table></figure><p><code>Array.of</code>总是返回参数值组成的数组。如果没有参数，就返回一个空数组。</p><p><code>Array.of</code>方法可以用下面的代码模拟实现。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ArrayOf</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [].slice.call(<span class="built_in">arguments</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="04-实例方法-copyWithin"><a href="#04-实例方法-copyWithin" class="headerlink" title="04 实例方法: copyWithin()"></a>04 实例方法: copyWithin()</h2><p>数组实例的<code>copyWithin()</code>方法，在当前数组内部，将指定位置的成员复制到其他位置（会覆盖原有成员），然后返回当前数组。也就是说，使用这个方法，会修改当前数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.copyWithin(target, start = <span class="number">0</span>, end = <span class="keyword">this</span>.length)</span><br></pre></td></tr></table></figure><p>它接受三个参数。</p><ul><li>target（必需）：从该位置开始替换数据。如果为负值，表示倒数。</li><li>start（可选）：从该位置开始读取数据，默认为 0。如果为负值，表示从末尾开始计算。</li><li>end（可选）：到该位置前停止读取数据，默认等于数组长度。如果为负值，表示从末尾开始计算。</li></ul><p>这三个参数都应该是数值，如果不是，会自动转为数值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].copyWithin(<span class="number">0</span>, <span class="number">3</span>)</span><br><span class="line"><span class="comment">// [4, 5, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><p>上面代码表示将从 3 号位直到数组结束的成员（4 和 5），复制到从 0 号位开始的位置，结果覆盖了原来的 1 和 2。</p><p>下面是更多例子。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将3号位复制到0号位</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].copyWithin(<span class="number">0</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"><span class="comment">// [4, 2, 3, 4, 5]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// -2相当于3号位，-1相当于4号位</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].copyWithin(<span class="number">0</span>, <span class="number">-2</span>, <span class="number">-1</span>)</span><br><span class="line"><span class="comment">// [4, 2, 3, 4, 5]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将3号位复制到0号位</span></span><br><span class="line">[].copyWithin.call(&#123;<span class="attr">length</span>: <span class="number">5</span>, <span class="number">3</span>: <span class="number">1</span>&#125;, <span class="number">0</span>, <span class="number">3</span>)</span><br><span class="line"><span class="comment">// &#123;0: 1, 3: 1, length: 5&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将2号位到数组结束，复制到0号位</span></span><br><span class="line"><span class="keyword">let</span> i32a = <span class="keyword">new</span> <span class="built_in">Int32Array</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]);</span><br><span class="line">i32a.copyWithin(<span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line"><span class="comment">// Int32Array [3, 4, 5, 4, 5]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对于没有部署 TypedArray 的 copyWithin 方法的平台</span></span><br><span class="line"><span class="comment">// 需要采用下面的写法</span></span><br><span class="line">[].copyWithin.call(<span class="keyword">new</span> <span class="built_in">Int32Array</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]), <span class="number">0</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line"><span class="comment">// Int32Array [4, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><h2 id="05-实例方法-find-和-findIndex"><a href="#05-实例方法-find-和-findIndex" class="headerlink" title="05 实例方法: find() 和 findIndex()"></a>05 实例方法: find() 和 findIndex()</h2><p>数组实例的<code>find</code>方法，用于找出第一个符合条件的数组成员。它的参数是一个回调函数，所有数组成员依次执行该回调函数，直到找出第一个返回值为<code>true</code>的成员，然后返回该成员。如果没有符合条件的成员，则返回<code>undefined</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">-5</span>, <span class="number">10</span>].find(<span class="function">(<span class="params">n</span>) =&gt;</span> n &lt; <span class="number">0</span>)</span><br><span class="line"><span class="comment">// -5</span></span><br></pre></td></tr></table></figure><p>上面代码找出数组中第一个小于 0 的成员。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>].find(<span class="function"><span class="keyword">function</span>(<span class="params">value, index, arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value &gt; <span class="number">9</span>;</span><br><span class="line">&#125;) <span class="comment">// 10</span></span><br></pre></td></tr></table></figure><p>上面代码中，<code>find</code>方法的回调函数可以接受三个参数，依次为当前的值、当前的位置和原数组。</p><p>数组实例的<code>findIndex</code>方法的用法与<code>find</code>方法非常类似，返回第一个符合条件的数组成员的位置，如果所有成员都不符合条件，则返回<code>-1</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>].findIndex(<span class="function"><span class="keyword">function</span>(<span class="params">value, index, arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value &gt; <span class="number">9</span>;</span><br><span class="line">&#125;) <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>这两个方法都可以接受第二个参数，用来绑定回调函数的<code>this</code>对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">v</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> v &gt; <span class="keyword">this</span>.age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> person = &#123;<span class="attr">name</span>: <span class="string">'John'</span>, <span class="attr">age</span>: <span class="number">20</span>&#125;;</span><br><span class="line">[<span class="number">10</span>, <span class="number">12</span>, <span class="number">26</span>, <span class="number">15</span>].find(f, person);    <span class="comment">// 26</span></span><br></pre></td></tr></table></figure><p>上面的代码中，<code>find</code>函数接收了第二个参数<code>person</code>对象，回调函数中的<code>this</code>对象指向<code>person</code>对象。</p><p>另外，这两个方法都可以发现<code>NaN</code>，弥补了数组的<code>indexOf</code>方法的不足。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="literal">NaN</span>].indexOf(<span class="literal">NaN</span>)</span><br><span class="line"><span class="comment">// -1</span></span><br><span class="line"></span><br><span class="line">[<span class="literal">NaN</span>].findIndex(<span class="function"><span class="params">y</span> =&gt;</span> <span class="built_in">Object</span>.is(<span class="literal">NaN</span>, y))</span><br><span class="line"><span class="comment">// 0</span></span><br></pre></td></tr></table></figure><p>上面代码中，<code>indexOf</code>方法无法识别数组的<code>NaN</code>成员，但是<code>findIndex</code>方法可以借助<code>Object.is</code>方法做到。</p><h2 id="06-实例方法-fill"><a href="#06-实例方法-fill" class="headerlink" title="06 实例方法: fill()"></a>06 实例方法: fill()</h2><p><code>fill</code>方法使用给定值，填充一个数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>].fill(<span class="number">7</span>)</span><br><span class="line"><span class="comment">// [7, 7, 7]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">3</span>).fill(<span class="number">7</span>)</span><br><span class="line"><span class="comment">// [7, 7, 7]</span></span><br></pre></td></tr></table></figure><p>上面代码表明，<code>fill</code>方法用于空数组的初始化非常方便。数组中已有的元素，会被全部抹去。</p><p><code>fill</code>方法还可以接受第二个和第三个参数，用于指定填充的起始位置和结束位置。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>].fill(<span class="number">7</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="comment">// ['a', 7, 'c']</span></span><br></pre></td></tr></table></figure><p>上面代码表示，<code>fill</code>方法从 1 号位开始，向原数组填充 7，到 2 号位之前结束。</p><p>注意，如果填充的类型为对象，那么被赋值的是同一个内存地址的对象，而不是深拷贝对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">3</span>).fill(&#123;<span class="attr">name</span>: <span class="string">"Mike"</span>&#125;);</span><br><span class="line">arr[<span class="number">0</span>].name = <span class="string">"Ben"</span>;</span><br><span class="line">arr</span><br><span class="line"><span class="comment">// [&#123;name: "Ben"&#125;, &#123;name: "Ben"&#125;, &#123;name: "Ben"&#125;]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">3</span>).fill([]);</span><br><span class="line">arr[<span class="number">0</span>].push(<span class="number">5</span>);</span><br><span class="line">arr</span><br><span class="line"><span class="comment">// [[5], [5], [5]]</span></span><br></pre></td></tr></table></figure><h2 id="07-实例方法-entries-，keys-和-values"><a href="#07-实例方法-entries-，keys-和-values" class="headerlink" title="07 实例方法: entries()，keys() 和 values()"></a>07 实例方法: entries()，keys() 和 values()</h2><p>ES6 提供三个新的方法——<code>entries()</code>，<code>keys()</code>和<code>values()</code>——用于遍历数组。它们都返回一个遍历器对象（详见《Iterator》一章），可以用<code>for...of</code>循环进行遍历，唯一的区别是<code>keys()</code>是对键名的遍历、<code>values()</code>是对键值的遍历，<code>entries()</code>是对键值对的遍历。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> index <span class="keyword">of</span> [<span class="string">'a'</span>, <span class="string">'b'</span>].keys()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(index);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 0</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> elem <span class="keyword">of</span> [<span class="string">'a'</span>, <span class="string">'b'</span>].values()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(elem);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 'a'</span></span><br><span class="line"><span class="comment">// 'b'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [index, elem] <span class="keyword">of</span> [<span class="string">'a'</span>, <span class="string">'b'</span>].entries()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(index, elem);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 0 "a"</span></span><br><span class="line"><span class="comment">// 1 "b"</span></span><br></pre></td></tr></table></figure><p>如果不使用<code>for...of</code>循环，可以手动调用遍历器对象的<code>next</code>方法，进行遍历。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> letter = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>];</span><br><span class="line"><span class="keyword">let</span> entries = letter.entries();</span><br><span class="line"><span class="built_in">console</span>.log(entries.next().value); <span class="comment">// [0, 'a']</span></span><br><span class="line"><span class="built_in">console</span>.log(entries.next().value); <span class="comment">// [1, 'b']</span></span><br><span class="line"><span class="built_in">console</span>.log(entries.next().value); <span class="comment">// [2, 'c']</span></span><br></pre></td></tr></table></figure><h2 id="08-实例方法-includes"><a href="#08-实例方法-includes" class="headerlink" title="08 实例方法: includes()"></a>08 实例方法: includes()</h2><p><code>Array.prototype.includes</code>方法返回一个布尔值，表示某个数组是否包含给定的值，与字符串的<code>includes</code>方法类似。ES2016 引入了该方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">2</span>)     <span class="comment">// true</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">4</span>)     <span class="comment">// false</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="literal">NaN</span>].includes(<span class="literal">NaN</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>该方法的第二个参数表示搜索的起始位置，默认为<code>0</code>。如果第二个参数为负数，则表示倒数的位置，如果这时它大于数组长度（比如第二个参数为<code>-4</code>，但数组长度为<code>3</code>），则会重置为从<code>0</code>开始。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">3</span>, <span class="number">3</span>);  <span class="comment">// false</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">3</span>, <span class="number">-1</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>没有该方法之前，我们通常使用数组的<code>indexOf</code>方法，检查是否包含某个值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (arr.indexOf(el) !== <span class="number">-1</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>indexOf</code>方法有两个缺点，一是不够语义化，它的含义是找到参数值的第一个出现位置，所以要去比较是否不等于<code>-1</code>，表达起来不够直观。二是，它内部使用严格相等运算符（<code>===</code>）进行判断，这会导致对<code>NaN</code>的误判。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="literal">NaN</span>].indexOf(<span class="literal">NaN</span>)</span><br><span class="line"><span class="comment">// -1</span></span><br></pre></td></tr></table></figure><p><code>includes</code>使用的是不一样的判断算法，就没有这个问题。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="literal">NaN</span>].includes(<span class="literal">NaN</span>)</span><br><span class="line"><span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>下面代码用来检查当前环境是否支持该方法，如果不支持，部署一个简易的替代版本。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> contains = <span class="function">(<span class="params">(</span>) =&gt;</span></span><br><span class="line">  <span class="built_in">Array</span>.prototype.includes</span><br><span class="line">    ? <span class="function">(<span class="params">arr, value</span>) =&gt;</span> arr.includes(value)</span><br><span class="line">    : <span class="function">(<span class="params">arr, value</span>) =&gt;</span> arr.some(<span class="function"><span class="params">el</span> =&gt;</span> el === value)</span><br><span class="line">)();</span><br><span class="line">contains([<span class="string">'foo'</span>, <span class="string">'bar'</span>], <span class="string">'baz'</span>); <span class="comment">// =&gt; false</span></span><br></pre></td></tr></table></figure><p>另外，Map 和 Set 数据结构有一个<code>has</code>方法，需要注意与<code>includes</code>区分。</p><ul><li>Map 结构的<code>has</code>方法，是用来查找键名的，比如<code>Map.prototype.has(key)</code>、<code>WeakMap.prototype.has(key)</code>、<code>Reflect.has(target, propertyKey)</code>。</li><li>Set 结构的<code>has</code>方法，是用来查找值的，比如<code>Set.prototype.has(value)</code>、<code>WeakSet.prototype.has(value)</code>。</li></ul><h2 id="09-实例方法-flat-，flatMap"><a href="#09-实例方法-flat-，flatMap" class="headerlink" title="09 实例方法: flat()，flatMap()"></a>09 实例方法: flat()，flatMap()</h2><p>数组的成员有时还是数组，<code>Array.prototype.flat()</code>用于将嵌套的数组“拉平”，变成一维的数组。该方法返回一个新数组，对原数据没有影响。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>]].flat()</span><br><span class="line"><span class="comment">// [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure><p>上面代码中，原数组的成员里面有一个数组，<code>flat()</code>方法将子数组的成员取出来，添加在原来的位置。</p><p><code>flat()</code>默认只会“拉平”一层，如果想要“拉平”多层的嵌套数组，可以将<code>flat()</code>方法的参数写成一个整数，表示想要拉平的层数，默认为1。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, [<span class="number">4</span>, <span class="number">5</span>]]].flat()</span><br><span class="line"><span class="comment">// [1, 2, 3, [4, 5]]</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, [<span class="number">4</span>, <span class="number">5</span>]]].flat(<span class="number">2</span>)</span><br><span class="line"><span class="comment">// [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><p>上面代码中，<code>flat()</code>的参数为2，表示要“拉平”两层的嵌套数组。</p><p>如果不管有多少层嵌套，都要转成一维数组，可以用<code>Infinity</code>关键字作为参数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, [<span class="number">2</span>, [<span class="number">3</span>]]].flat(<span class="literal">Infinity</span>)</span><br><span class="line"><span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure><p>如果原数组有空位，<code>flat()</code>方法会跳过空位。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, , <span class="number">4</span>, <span class="number">5</span>].flat()</span><br><span class="line"><span class="comment">// [1, 2, 4, 5]</span></span><br></pre></td></tr></table></figure><p><code>flatMap()</code>方法对原数组的每个成员执行一个函数（相当于执行<code>Array.prototype.map()</code>），然后对返回值组成的数组执行<code>flat()</code>方法。该方法返回一个新数组，不改变原数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 相当于 [[2, 4], [3, 6], [4, 8]].flat()</span></span><br><span class="line">[<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>].flatMap(<span class="function">(<span class="params">x</span>) =&gt;</span> [x, x * <span class="number">2</span>])</span><br><span class="line"><span class="comment">// [2, 4, 3, 6, 4, 8]</span></span><br></pre></td></tr></table></figure><p><code>flatMap()</code>只能展开一层数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 相当于 [[[2]], [[4]], [[6]], [[8]]].flat()</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>].flatMap(<span class="function"><span class="params">x</span> =&gt;</span> [[x * <span class="number">2</span>]])</span><br><span class="line"><span class="comment">// [[2], [4], [6], [8]]</span></span><br></pre></td></tr></table></figure><p>上面代码中，遍历函数返回的是一个双层的数组，但是默认只能展开一层，因此<code>flatMap()</code>返回的还是一个嵌套数组。</p><p><code>flatMap()</code>方法的参数是一个遍历函数，该函数可以接受三个参数，分别是当前数组成员、当前数组成员的位置（从零开始）、原数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">arr.flatMap(<span class="function"><span class="keyword">function</span> <span class="title">callback</span>(<span class="params">currentValue[, index[, array]]</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;[, thisArg])</span><br></pre></td></tr></table></figure><p><code>flatMap()</code>方法还可以有第二个参数，用来绑定遍历函数里面的<code>this</code>。</p><h2 id="10-数组的空位"><a href="#10-数组的空位" class="headerlink" title="10 数组的空位"></a>10 数组的空位</h2><p>数组的空位指，数组的某一个位置没有任何值。比如，<code>Array</code>构造函数返回的数组都是空位。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>(<span class="number">3</span>) <span class="comment">// [, , ,]</span></span><br></pre></td></tr></table></figure><p>上面代码中，<code>Array(3)</code>返回一个具有 3 个空位的数组。</p><p>注意，空位不是<code>undefined</code>，一个位置的值等于<code>undefined</code>，依然是有值的。空位是没有任何值，<code>in</code>运算符可以说明这一点。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span> <span class="keyword">in</span> [<span class="literal">undefined</span>, <span class="literal">undefined</span>, <span class="literal">undefined</span>] <span class="comment">// true</span></span><br><span class="line"><span class="number">0</span> <span class="keyword">in</span> [, , ,] <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>上面代码说明，第一个数组的 0 号位置是有值的，第二个数组的 0 号位置没有值。</p><p>ES5 对空位的处理，已经很不一致了，大多数情况下会忽略空位。</p><ul><li><code>forEach()</code>, <code>filter()</code>, <code>reduce()</code>, <code>every()</code> 和<code>some()</code>都会跳过空位。</li><li><code>map()</code>会跳过空位，但会保留这个值</li><li><code>join()</code>和<code>toString()</code>会将空位视为<code>undefined</code>，而<code>undefined</code>和<code>null</code>会被处理成空字符串。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// forEach方法</span></span><br><span class="line">[,<span class="string">'a'</span>].forEach(<span class="function">(<span class="params">x,i</span>) =&gt;</span> <span class="built_in">console</span>.log(i)); <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// filter方法</span></span><br><span class="line">[<span class="string">'a'</span>,,<span class="string">'b'</span>].filter(<span class="function"><span class="params">x</span> =&gt;</span> <span class="literal">true</span>) <span class="comment">// ['a','b']</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// every方法</span></span><br><span class="line">[,<span class="string">'a'</span>].every(<span class="function"><span class="params">x</span> =&gt;</span> x===<span class="string">'a'</span>) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// reduce方法</span></span><br><span class="line">[<span class="number">1</span>,,<span class="number">2</span>].reduce(<span class="function">(<span class="params">x,y</span>) =&gt;</span> x+y) <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// some方法</span></span><br><span class="line">[,<span class="string">'a'</span>].some(<span class="function"><span class="params">x</span> =&gt;</span> x !== <span class="string">'a'</span>) <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// map方法</span></span><br><span class="line">[,<span class="string">'a'</span>].map(<span class="function"><span class="params">x</span> =&gt;</span> <span class="number">1</span>) <span class="comment">// [,1]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// join方法</span></span><br><span class="line">[,<span class="string">'a'</span>,<span class="literal">undefined</span>,<span class="literal">null</span>].join(<span class="string">'#'</span>) <span class="comment">// "#a##"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// toString方法</span></span><br><span class="line">[,<span class="string">'a'</span>,<span class="literal">undefined</span>,<span class="literal">null</span>].toString() <span class="comment">// ",a,,"</span></span><br></pre></td></tr></table></figure><p>ES6 则是明确将空位转为<code>undefined</code>。</p><p><code>Array.from</code>方法会将数组的空位，转为<code>undefined</code>，也就是说，这个方法不会忽略空位。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.from([<span class="string">'a'</span>,,<span class="string">'b'</span>])</span><br><span class="line"><span class="comment">// [ "a", undefined, "b" ]</span></span><br></pre></td></tr></table></figure><p>扩展运算符（<code>...</code>）也会将空位转为<code>undefined</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[...[<span class="string">'a'</span>,,<span class="string">'b'</span>]]</span><br><span class="line"><span class="comment">// [ "a", undefined, "b" ]</span></span><br></pre></td></tr></table></figure><p><code>copyWithin()</code>会连空位一起拷贝。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[,<span class="string">'a'</span>,<span class="string">'b'</span>,,].copyWithin(<span class="number">2</span>,<span class="number">0</span>) <span class="comment">// [,"a",,"a"]</span></span><br></pre></td></tr></table></figure><p><code>fill()</code>会将空位视为正常的数组位置。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">3</span>).fill(<span class="string">'a'</span>) <span class="comment">// ["a","a","a"]</span></span><br></pre></td></tr></table></figure><p><code>for...of</code>循环也会遍历空位。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [, ,];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> arr) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>上面代码中，数组<code>arr</code>有两个空位，<code>for...of</code>并没有忽略它们。如果改成<code>map</code>方法遍历，空位是会跳过的。</p><p><code>entries()</code>、<code>keys()</code>、<code>values()</code>、<code>find()</code>和<code>findIndex()</code>会将空位处理成<code>undefined</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// entries()</span></span><br><span class="line">[...[,<span class="string">'a'</span>].entries()] <span class="comment">// [[0,undefined], [1,"a"]]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// keys()</span></span><br><span class="line">[...[,<span class="string">'a'</span>].keys()] <span class="comment">// [0,1]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// values()</span></span><br><span class="line">[...[,<span class="string">'a'</span>].values()] <span class="comment">// [undefined,"a"]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// find()</span></span><br><span class="line">[,<span class="string">'a'</span>].find(<span class="function"><span class="params">x</span> =&gt;</span> <span class="literal">true</span>) <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// findIndex()</span></span><br><span class="line">[,<span class="string">'a'</span>].findIndex(<span class="function"><span class="params">x</span> =&gt;</span> <span class="literal">true</span>) <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><p>由于空位的处理规则非常不统一，所以建议避免出现空位。</p><h2 id="11-Array-prototype-sort-的排序稳定性"><a href="#11-Array-prototype-sort-的排序稳定性" class="headerlink" title="11 Array.prototype.sort() 的排序稳定性"></a>11 Array.prototype.sort() 的排序稳定性</h2><p>排序稳定性（stable sorting）是排序算法的重要属性，指的是排序关键字相同的项目，排序前后的顺序不变。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [</span><br><span class="line">  <span class="string">'peach'</span>,</span><br><span class="line">  <span class="string">'straw'</span>,</span><br><span class="line">  <span class="string">'apple'</span>,</span><br><span class="line">  <span class="string">'spork'</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> stableSorting = <span class="function">(<span class="params">s1, s2</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (s1[<span class="number">0</span>] &lt; s2[<span class="number">0</span>]) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">arr.sort(stableSorting)</span><br><span class="line"><span class="comment">// ["apple", "peach", "straw", "spork"]</span></span><br></pre></td></tr></table></figure><p>上面代码对数组<code>arr</code>按照首字母进行排序。排序结果中，<code>straw</code>在<code>spork</code>的前面，跟原始顺序一致，所以排序算法<code>stableSorting</code>是稳定排序。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> unstableSorting = <span class="function">(<span class="params">s1, s2</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (s1[<span class="number">0</span>] &lt;= s2[<span class="number">0</span>]) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">arr.sort(unstableSorting)</span><br><span class="line"><span class="comment">// ["apple", "peach", "spork", "straw"]</span></span><br></pre></td></tr></table></figure><p>上面代码中，排序结果是<code>spork</code>在<code>straw</code>前面，跟原始顺序相反，所以排序算法<code>unstableSorting</code>是不稳定的。</p><p>常见的排序算法之中，插入排序、合并排序、冒泡排序等都是稳定的，堆排序、快速排序等是不稳定的。不稳定排序的主要缺点是，多重排序时可能会产生问题。假设有一个姓和名的列表，要求按照“姓氏为主要关键字，名字为次要关键字”进行排序。开发者可能会先按名字排序，再按姓氏进行排序。如果排序算法是稳定的，这样就可以达到“先姓氏，后名字”的排序效果。如果是不稳定的，就不行。</p><p>早先的 ECMAScript 没有规定，<code>Array.prototype.sort()</code>的默认排序算法是否稳定，留给浏览器自己决定，这导致某些实现是不稳定的。<a href="https://github.com/tc39/ecma262/pull/1340" target="_blank" rel="noopener">ES2019</a> 明确规定，<code>Array.prototype.sort()</code>的默认排序算法必须稳定。这个规定已经做到了，现在 JavaScript 各个主要实现的默认排序算法都是稳定的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;01-扩展运算符&quot;&gt;&lt;a href=&quot;#01-扩展运算符&quot; class=&quot;headerlink&quot; title=&quot;01 扩展运算符&quot;&gt;&lt;/a&gt;01 扩展运算符&lt;/h2&gt;&lt;h3 id=&quot;含义&quot;&gt;&lt;a href=&quot;#含义&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
      <category term="转载" scheme="http://yoursite.com/tags/%E8%BD%AC%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>ES6字符串新增方法</title>
    <link href="http://yoursite.com/2020/10/29/es6-string/"/>
    <id>http://yoursite.com/2020/10/29/es6-string/</id>
    <published>2020-10-29T06:30:39.000Z</published>
    <updated>2021-12-03T01:42:55.811Z</updated>
    
    <content type="html"><![CDATA[<h2 id="01-String-fromCodePoint"><a href="#01-String-fromCodePoint" class="headerlink" title="01 String.fromCodePoint()"></a>01 String.fromCodePoint()</h2><p>ES5 提供<code>String.fromCharCode()</code>方法，用于从 Unicode 码点返回对应字符，但是这个方法不能识别码点大于<code>0xFFFF</code>的字符。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span>.fromCharCode(<span class="number">0x20BB7</span>)</span><br><span class="line"><span class="comment">// "ஷ"</span></span><br></pre></td></tr></table></figure><p>上面代码中，<code>String.fromCharCode()</code>不能识别大于<code>0xFFFF</code>的码点，所以<code>0x20BB7</code>就发生了溢出，最高位<code>2</code>被舍弃了，最后返回码点<code>U+0BB7</code>对应的字符，而不是码点<code>U+20BB7</code>对应的字符。</p><p>ES6 提供了<code>String.fromCodePoint()</code>方法，可以识别大于<code>0xFFFF</code>的字符，弥补了<code>String.fromCharCode()</code>方法的不足。在作用上，正好与下面的<code>codePointAt()</code>方法相反。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span>.fromCodePoint(<span class="number">0x20BB7</span>)</span><br><span class="line"><span class="comment">// "𠮷"</span></span><br><span class="line"><span class="built_in">String</span>.fromCodePoint(<span class="number">0x78</span>, <span class="number">0x1f680</span>, <span class="number">0x79</span>) === <span class="string">'x\uD83D\uDE80y'</span></span><br><span class="line"><span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>上面代码中，如果<code>String.fromCodePoint</code>方法有多个参数，则它们会被合并成一个字符串返回。</p><p>注意，<code>fromCodePoint</code>方法定义在<code>String</code>对象上，而<code>codePointAt</code>方法定义在字符串的实例对象上。</p><h2 id="02-String-raw"><a href="#02-String-raw" class="headerlink" title="02 String.raw()"></a>02 String.raw()</h2><p>ES6 还为原生的 String 对象，提供了一个<code>raw()</code>方法。该方法返回一个斜杠都被转义（即斜杠前面再加一个斜杠）的字符串，往往用于模板字符串的处理方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span>.raw<span class="string">`Hi\n<span class="subst">$&#123;<span class="number">2</span>+<span class="number">3</span>&#125;</span>!`</span></span><br><span class="line"><span class="comment">// 实际返回 "Hi\\n5!"，显示的是转义后的结果 "Hi\n5!"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">String</span>.raw<span class="string">`Hi\u000A!`</span>;</span><br><span class="line"><span class="comment">// 实际返回 "Hi\\u000A!"，显示的是转义后的结果 "Hi\u000A!"</span></span><br></pre></td></tr></table></figure><p>如果原字符串的斜杠已经转义，那么<code>String.raw()</code>会进行再次转义。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span>.raw<span class="string">`Hi\\n`</span></span><br><span class="line"><span class="comment">// 返回 "Hi\\\\n"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">String</span>.raw<span class="string">`Hi\\n`</span> === <span class="string">"Hi\\\\n"</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><code>String.raw()</code>方法可以作为处理模板字符串的基本方法，它会将所有变量替换，而且对斜杠进行转义，方便下一步作为字符串来使用。</p><p><code>String.raw()</code>本质上是一个正常的函数，只是专用于模板字符串的标签函数。如果写成正常函数的形式，它的第一个参数，应该是一个具有<code>raw</code>属性的对象，且<code>raw</code>属性的值应该是一个数组，对应模板字符串解析后的值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// `foo$&#123;1 + 2&#125;bar`</span></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="built_in">String</span>.raw(&#123; <span class="attr">raw</span>: [<span class="string">'foo'</span>, <span class="string">'bar'</span>] &#125;, <span class="number">1</span> + <span class="number">2</span>) <span class="comment">// "foo3bar"</span></span><br></pre></td></tr></table></figure><p>上面代码中，<code>String.raw()</code>方法的第一个参数是一个对象，它的raw属性等同于原始的模板字符串解析后得到的数组。</p><p>作为函数，<code>String.raw()</code>的代码实现基本如下。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span>.raw = <span class="function"><span class="keyword">function</span> (<span class="params">strings, ...values</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> output = <span class="string">''</span>;</span><br><span class="line">  <span class="keyword">let</span> index;</span><br><span class="line">  <span class="keyword">for</span> (index = <span class="number">0</span>; index &lt; values.length; index++) &#123;</span><br><span class="line">    output += strings.raw[index] + values[index];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  output += strings.raw[index]</span><br><span class="line">  <span class="keyword">return</span> output;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="03-实例方法：codePointAt"><a href="#03-实例方法：codePointAt" class="headerlink" title="03 实例方法：codePointAt()"></a>03 实例方法：codePointAt()</h2><p>JavaScript 内部，字符以 UTF-16 的格式储存，每个字符固定为·个字节。对于那些需要4个字节储存的字符（Unicode 码点大于·的字符），JavaScript 会认为它们是两个字符。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">"𠮷"</span>;</span><br><span class="line"></span><br><span class="line">s.length <span class="comment">// 2</span></span><br><span class="line">s.charAt(<span class="number">0</span>) <span class="comment">// ''</span></span><br><span class="line">s.charAt(<span class="number">1</span>) <span class="comment">// ''</span></span><br><span class="line">s.charCodeAt(<span class="number">0</span>) <span class="comment">// 55362</span></span><br><span class="line">s.charCodeAt(<span class="number">1</span>) <span class="comment">// 57271</span></span><br></pre></td></tr></table></figure><p>上面代码中，汉字“𠮷”（注意，这个字不是“吉祥”的“吉”）的码点是<code>0x20BB7</code>，UTF-16 编码为<code>0xD842 0xDFB7</code>（十进制为<code>55362 57271</code>），需要<code>4</code>个字节储存。对于这种<code>4</code>个字节的字符，JavaScript 不能正确处理，字符串长度会误判为<code>2</code>，而且<code>charAt()</code>方法无法读取整个字符，charCodeAt()方法只能分别返回前两个字节和后两个字节的值。</p><p>ES6 提供了<code>codePointAt()</code>方法，能够正确处理 4 个字节储存的字符，返回一个字符的码点。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="string">'𠮷a'</span>;</span><br><span class="line"></span><br><span class="line">s.codePointAt(<span class="number">0</span>) <span class="comment">// 134071</span></span><br><span class="line">s.codePointAt(<span class="number">1</span>) <span class="comment">// 57271</span></span><br><span class="line"></span><br><span class="line">s.codePointAt(<span class="number">2</span>) <span class="comment">// 97</span></span><br></pre></td></tr></table></figure><p><code>codePointAt()</code>方法的参数，是字符在字符串中的位置（从 0 开始）。上面代码中，JavaScript 将“𠮷a”视为三个字符，codePointAt 方法在第一个字符上，正确地识别了“𠮷”，返回了它的十进制码点 134071（即十六进制的<code>20BB7</code>）。在第二个字符（即“𠮷”的后两个字节）和第三个字符“a”上，<code>codePointAt()</code>方法的结果与<code>charCodeAt()</code>方法相同。</p><p>总之，<code>codePointAt()</code>方法会正确返回 32 位的 UTF-16 字符的码点。对于那些两个字节储存的常规字符，它的返回结果与<code>charCodeAt()</code>方法相同。</p><p><code>codePointAt()</code>方法返回的是码点的十进制值，如果想要十六进制的值，可以使用<code>toString()</code>方法转换一下。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="string">'𠮷a'</span>;</span><br><span class="line"></span><br><span class="line">s.codePointAt(<span class="number">0</span>).toString(<span class="number">16</span>) <span class="comment">// "20bb7"</span></span><br><span class="line">s.codePointAt(<span class="number">2</span>).toString(<span class="number">16</span>) <span class="comment">// "61"</span></span><br></pre></td></tr></table></figure><p>你可能注意到了，<code>codePointAt()</code>方法的参数，仍然是不正确的。比如，上面代码中，字符<code>a</code>在字符串<code>s</code>的正确位置序号应该是 1，但是必须向<code>codePointAt()</code>方法传入 2。解决这个问题的一个办法是使用<code>for...of</code>循环，因为它会正确识别 32 位的 UTF-16 字符。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="string">'𠮷a'</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> ch <span class="keyword">of</span> s) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(ch.codePointAt(<span class="number">0</span>).toString(<span class="number">16</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 20bb7</span></span><br><span class="line"><span class="comment">// 61</span></span><br></pre></td></tr></table></figure><p>另一种方法也可以，使用扩展运算符（<code>...</code>）进行展开运算。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [...<span class="string">'𠮷a'</span>]; <span class="comment">// arr.length === 2</span></span><br><span class="line">arr.forEach(</span><br><span class="line">  ch =&gt; <span class="built_in">console</span>.log(ch.codePointAt(<span class="number">0</span>).toString(<span class="number">16</span>))</span><br><span class="line">);</span><br><span class="line"><span class="comment">// 20bb7</span></span><br><span class="line"><span class="comment">// 61</span></span><br></pre></td></tr></table></figure><p><code>codePointAt()</code>方法是测试一个字符由两个字节还是由四个字节组成的最简单方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">is32Bit</span>(<span class="params">c</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> c.codePointAt(<span class="number">0</span>) &gt; <span class="number">0xFFFF</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">is32Bit(<span class="string">"𠮷"</span>) <span class="comment">// true</span></span><br><span class="line">is32Bit(<span class="string">"a"</span>) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h2 id="04-实例方法：normalize"><a href="#04-实例方法：normalize" class="headerlink" title="04 实例方法：normalize()"></a>04 实例方法：normalize()</h2><p>许多欧洲语言有语调符号和重音符号。为了表示它们，Unicode 提供了两种方法。一种是直接提供带重音符号的字符，比如<code>Ǒ</code>（\u01D1）。另一种是提供合成符号（combining character），即原字符与重音符号的合成，两个字符合成一个字符，比如<code>O</code>（\u004F）和<code>ˇ</code>（\u030C）合成<code>Ǒ</code>（\u004F\u030C）。</p><p>这两种表示方法，在视觉和语义上都等价，但是 JavaScript 不能识别。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'\u01D1'</span>===<span class="string">'\u004F\u030C'</span> <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="string">'\u01D1'</span>.length <span class="comment">// 1</span></span><br><span class="line"><span class="string">'\u004F\u030C'</span>.length <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>上面代码表示，JavaScript 将合成字符视为两个字符，导致两种表示方法不相等。</p><p>ES6 提供字符串实例的<code>normalize()</code>方法，用来将字符的不同表示方法统一为同样的形式，这称为 Unicode 正规化。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'\u01D1'</span>.normalize() === <span class="string">'\u004F\u030C'</span>.normalize()</span><br><span class="line"><span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><code>normalize</code>方法可以接受一个参数来指定normalize的方式，参数的四个可选值如下。</p><ul><li><code>NFC</code>，默认参数，表示“标准等价合成”（Normalization Form Canonical Composition），返回多个简单字符的合成字符。所谓“标准等价”指的是视觉和语义上的等价。</li><li><code>NFD</code>，表示“标准等价分解”（Normalization Form Canonical Decomposition），即在标准等价的前提下，返回合成字符分解的多个简单字符。</li><li><code>NFKC</code>，表示“兼容等价合成”（Normalization Form Compatibility Composition），返回合成字符。所谓“兼容等价”指的是语义上存在等价，但视觉上不等价，比如“囍”和“喜喜”。（这只是用来举例，<code>normalize</code>方法不能识别中文。）</li><li><code>NFKD</code>，表示“兼容等价分解”（Normalization Form Compatibility Decomposition），即在兼容等价的前提下，返回合成字符分解的多个简单字符。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'\u004F\u030C'</span>.normalize(<span class="string">'NFC'</span>).length <span class="comment">// 1</span></span><br><span class="line"><span class="string">'\u004F\u030C'</span>.normalize(<span class="string">'NFD'</span>).length <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>上面代码表示，<code>NFC</code>参数返回字符的合成形式，<code>NFD</code>参数返回字符的分解形式。</p><p>不过，<code>normalize</code>方法目前不能识别三个或三个以上字符的合成。这种情况下，还是只能使用正则表达式，通过 Unicode 编号区间判断。</p><h2 id="05-实例方法：includes-startsWith-endsWith"><a href="#05-实例方法：includes-startsWith-endsWith" class="headerlink" title="05 实例方法：includes(), startsWith(), endsWith()"></a>05 实例方法：includes(), startsWith(), endsWith()</h2><p>传统上，JavaScript 只有<code>indexOf</code>方法，可以用来确定一个字符串是否包含在另一个字符串中。ES6 又提供了三种新方法。</p><ul><li><strong>includes()：</strong> 返回布尔值，表示是否找到了参数字符串。</li><li><strong>startsWith()：</strong> 返回布尔值，表示参数字符串是否在原字符串的头部。</li><li><strong>endsWith()：</strong> 返回布尔值，表示参数字符串是否在原字符串的尾部。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="string">'Hello world!'</span>;</span><br><span class="line"></span><br><span class="line">s.startsWith(<span class="string">'Hello'</span>) <span class="comment">// true</span></span><br><span class="line">s.endsWith(<span class="string">'!'</span>) <span class="comment">// true</span></span><br><span class="line">s.includes(<span class="string">'o'</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>这三个方法都支持第二个参数，表示开始搜索的位置。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="string">'Hello world!'</span>;</span><br><span class="line"></span><br><span class="line">s.startsWith(<span class="string">'world'</span>, <span class="number">6</span>) <span class="comment">// true</span></span><br><span class="line">s.endsWith(<span class="string">'Hello'</span>, <span class="number">5</span>) <span class="comment">// true</span></span><br><span class="line">s.includes(<span class="string">'Hello'</span>, <span class="number">6</span>) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>上面代码表示，使用第二个参数<code>n</code>时，<code>endsWith</code>的行为与其他两个方法有所不同。它针对前<code>n</code>个字符，而其他两个方法针对从第<code>n</code>个位置直到字符串结束。</p><h2 id="06-实例方法：repeat"><a href="#06-实例方法：repeat" class="headerlink" title="06 实例方法：repeat()"></a>06 实例方法：repeat()</h2><p><code>repeat</code>方法返回一个新字符串，表示将原字符串重复<code>n</code>次。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'x'</span>.repeat(<span class="number">3</span>) <span class="comment">// "xxx"</span></span><br><span class="line"><span class="string">'hello'</span>.repeat(<span class="number">2</span>) <span class="comment">// "hellohello"</span></span><br><span class="line"><span class="string">'na'</span>.repeat(<span class="number">0</span>) <span class="comment">// ""</span></span><br></pre></td></tr></table></figure><p>参数如果是小数，会被取整。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'na'</span>.repeat(<span class="number">2.9</span>) <span class="comment">// "nana"</span></span><br></pre></td></tr></table></figure><p>如果<code>repeat</code>的参数是负数或者<code>Infinity</code>，会报错。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'na'</span>.repeat(<span class="literal">Infinity</span>)</span><br><span class="line"><span class="comment">// RangeError</span></span><br><span class="line"><span class="string">'na'</span>.repeat(<span class="number">-1</span>)</span><br><span class="line"><span class="comment">// RangeError</span></span><br></pre></td></tr></table></figure><p>但是，如果参数是 0 到-1 之间的小数，则等同于 0，这是因为会先进行取整运算。0 到-1 之间的小数，取整以后等于<code>-0</code>，<code>repeat</code>视同为 0。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'na'</span>.repeat(<span class="number">-0.9</span>) <span class="comment">// ""</span></span><br></pre></td></tr></table></figure><p>参数<code>NaN</code>等同于 0。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'na'</span>.repeat(<span class="literal">NaN</span>) <span class="comment">// ""</span></span><br></pre></td></tr></table></figure><p>如果<code>repeat</code>的参数是字符串，则会先转换成数字。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'na'</span>.repeat(<span class="string">'na'</span>) <span class="comment">// ""</span></span><br><span class="line"><span class="string">'na'</span>.repeat(<span class="string">'3'</span>) <span class="comment">// "nanana"</span></span><br></pre></td></tr></table></figure><h2 id="07-实例方法：padStart-，padEnd"><a href="#07-实例方法：padStart-，padEnd" class="headerlink" title="07 实例方法：padStart()，padEnd()"></a>07 实例方法：padStart()，padEnd()</h2><p>ES2017 引入了字符串补全长度的功能。如果某个字符串不够指定长度，会在头部或尾部补全。<code>padStart()</code>用于头部补全，<code>padEnd()</code>用于尾部补全。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'x'</span>.padStart(<span class="number">5</span>, <span class="string">'ab'</span>) <span class="comment">// 'ababx'</span></span><br><span class="line"><span class="string">'x'</span>.padStart(<span class="number">4</span>, <span class="string">'ab'</span>) <span class="comment">// 'abax'</span></span><br><span class="line"></span><br><span class="line"><span class="string">'x'</span>.padEnd(<span class="number">5</span>, <span class="string">'ab'</span>) <span class="comment">// 'xabab'</span></span><br><span class="line"><span class="string">'x'</span>.padEnd(<span class="number">4</span>, <span class="string">'ab'</span>) <span class="comment">// 'xaba'</span></span><br></pre></td></tr></table></figure><p>上面代码中，<code>padStart()</code>和<code>padEnd()</code>一共接受两个参数，第一个参数是字符串补全生效的最大长度，第二个参数是用来补全的字符串。</p><p>如果原字符串的长度，等于或大于最大长度，则字符串补全不生效，返回原字符串。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'xxx'</span>.padStart(<span class="number">2</span>, <span class="string">'ab'</span>) <span class="comment">// 'xxx'</span></span><br><span class="line"><span class="string">'xxx'</span>.padEnd(<span class="number">2</span>, <span class="string">'ab'</span>) <span class="comment">// 'xxx'</span></span><br></pre></td></tr></table></figure><p>如果用来补全的字符串与原字符串，两者的长度之和超过了最大长度，则会截去超出位数的补全字符串。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'abc'</span>.padStart(<span class="number">10</span>, <span class="string">'0123456789'</span>)</span><br><span class="line"><span class="comment">// '0123456abc'</span></span><br></pre></td></tr></table></figure><p>如果省略第二个参数，默认使用空格补全长度。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'x'</span>.padStart(<span class="number">4</span>) <span class="comment">// '   x'</span></span><br><span class="line"><span class="string">'x'</span>.padEnd(<span class="number">4</span>) <span class="comment">// 'x   '</span></span><br></pre></td></tr></table></figure><p><code>padStart()</code>的常见用途是为数值补全指定位数。下面代码生成 10 位的数值字符串。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'1'</span>.padStart(<span class="number">10</span>, <span class="string">'0'</span>) <span class="comment">// "0000000001"</span></span><br><span class="line"><span class="string">'12'</span>.padStart(<span class="number">10</span>, <span class="string">'0'</span>) <span class="comment">// "0000000012"</span></span><br><span class="line"><span class="string">'123456'</span>.padStart(<span class="number">10</span>, <span class="string">'0'</span>) <span class="comment">// "0000123456"</span></span><br></pre></td></tr></table></figure><p>另一个用途是提示字符串格式。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'12'</span>.padStart(<span class="number">10</span>, <span class="string">'YYYY-MM-DD'</span>) <span class="comment">// "YYYY-MM-12"</span></span><br><span class="line"><span class="string">'09-12'</span>.padStart(<span class="number">10</span>, <span class="string">'YYYY-MM-DD'</span>) <span class="comment">// "YYYY-09-12"</span></span><br></pre></td></tr></table></figure><h2 id="08-实例方法：trimStart-，trimEnd"><a href="#08-实例方法：trimStart-，trimEnd" class="headerlink" title="08 实例方法：trimStart()，trimEnd()"></a>08 实例方法：trimStart()，trimEnd()</h2><p><a href="https://github.com/tc39/proposal-string-left-right-trim" target="_blank" rel="noopener">ES2019</a> 对字符串实例新增了<code>trimStart()</code>和<code>trimEnd()</code>这两个方法。它们的行为与<code>trim()</code>一致，<code>trimStart()</code>消除字符串头部的空格，<code>trimEnd()</code>消除尾部的空格。它们返回的都是新字符串，不会修改原始字符串。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> s = <span class="string">'  abc  '</span>;</span><br><span class="line"></span><br><span class="line">s.trim() <span class="comment">// "abc"</span></span><br><span class="line">s.trimStart() <span class="comment">// "abc  "</span></span><br><span class="line">s.trimEnd() <span class="comment">// "  abc"</span></span><br></pre></td></tr></table></figure><p>上面代码中，<code>trimStart()</code>只消除头部的空格，保留尾部的空格。<code>trimEnd()</code>也是类似行为。</p><p>除了空格键，这两个方法对字符串头部（或尾部）的 tab 键、换行符等不可见的空白符号也有效。</p><p>浏览器还部署了额外的两个方法，<code>trimLeft()</code>是<code>trimStart()</code>的别名，<code>trimRight()</code>是<code>trimEnd()</code>的别名。</p><h2 id="09-实例方法：matchAll"><a href="#09-实例方法：matchAll" class="headerlink" title="09 实例方法：matchAll()"></a>09 实例方法：matchAll()</h2><p><code>matchAll()</code>方法返回一个正则表达式在当前字符串的所有匹配，详见<a href="https://es6.ruanyifeng.com/#docs/regex" target="_blank" rel="noopener">《正则的扩展》</a>的一章。</p><h2 id="10-实例方法：replaceAll"><a href="#10-实例方法：replaceAll" class="headerlink" title="10 实例方法：replaceAll()"></a>10 实例方法：replaceAll()</h2><p>历史上，字符串的实例方法<code>replace()</code>只能替换第一个匹配。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'aabbcc'</span>.replace(<span class="string">'b'</span>, <span class="string">'_'</span>)</span><br><span class="line"><span class="comment">// 'aa_bcc'</span></span><br></pre></td></tr></table></figure><p>上面例子中，<code>replace()</code>只将第一个<code>b</code>替换成了下划线。</p><p>如果要替换所有的匹配，不得不使用正则表达式的g修饰符。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'aabbcc'</span>.replace(<span class="regexp">/b/g</span>, <span class="string">'_'</span>)</span><br><span class="line"><span class="comment">// 'aa__cc'</span></span><br></pre></td></tr></table></figure><p>正则表达式毕竟不是那么方便和直观，<a href="https://github.com/tc39/proposal-string-replaceall" target="_blank" rel="noopener">ES2021</a> 引入了<code>replaceAll()</code>方法，可以一次性替换所有匹配。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'aabbcc'</span>.replaceAll(<span class="string">'b'</span>, <span class="string">'_'</span>)</span><br><span class="line"><span class="comment">// 'aa__cc'</span></span><br></pre></td></tr></table></figure><p>它的用法与<code>replace()</code>相同，返回一个新字符串，不会改变原字符串。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span>.prototype.replaceAll(searchValue, replacement)</span><br></pre></td></tr></table></figure><p>上面代码中，<code>searchValue</code>是搜索模式，可以是一个字符串，也可以是一个全局的正则表达式（带有<code>g</code>修饰符）。</p><p>如果<code>searchValue</code>是一个不带有<code>g</code>修饰符的正则表达式，<code>replaceAll()</code>会报错。这一点跟<code>replace()</code>不同。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不报错</span></span><br><span class="line"><span class="string">'aabbcc'</span>.replace(<span class="regexp">/b/</span>, <span class="string">'_'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="string">'aabbcc'</span>.replaceAll(<span class="regexp">/b/</span>, <span class="string">'_'</span>)</span><br></pre></td></tr></table></figure><p>上面例子中，<code>/b/</code>不带有<code>g</code>修饰符，会导致<code>replaceAll()</code>报错。</p><p><code>replaceAll()</code>的第二个参数<code>replacement</code>是一个字符串，表示替换的文本，其中可以使用一些特殊字符串。</p><ul><li><code>$&amp;</code>：匹配的子字符串。</li><li><code>`$`</code>：匹配结果前面的文本。</li><li><code>$&#39;</code>：匹配结果后面的文本。</li><li><code>$n</code>：匹配成功的第n组内容，n是从1开始的自然数。</li><li><code>$$</code>：指代美元符号$。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'abc'</span>.replaceAll(<span class="string">'b'</span>, <span class="string">'$$'</span>)</span><br><span class="line"><span class="comment">// 'a$c'</span></span><br></pre></td></tr></table></figure><p>上面例子中，<code>$$</code>表示替换的文本是单个美元符号<code>$</code>。</p><p><code>replaceAll()</code>的第二个参数<code>replacement</code>除了为字符串，也可以是一个函数，该函数的返回值将替换掉第一个参数<code>searchValue</code>匹配的文本。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'aabbcc'</span>.replaceAll(<span class="string">'b'</span>, () =&gt; <span class="string">'_'</span>)</span><br><span class="line"><span class="comment">// 'aa__cc'</span></span><br></pre></td></tr></table></figure><p>上面例子中，<code>replaceAll()</code>的第二个参数是一个函数，该函数的返回值会替换掉所有<code>b</code>的匹配。</p><p>这个替换函数可以接受多个参数。第一个参数是捕捉到的匹配内容，第二个参数捕捉到是组匹配（有多少个组匹配，就有多少个对应的参数）。此外，最后还可以添加两个参数，倒数第二个参数是捕捉到的内容在整个字符串中的位置，最后一个参数是原字符串。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">'123abc456'</span>;</span><br><span class="line"><span class="keyword">const</span> regex = <span class="regexp">/(\d+)([a-z]+)(\d+)/g</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">replacer</span>(<span class="params">match, p1, p2, p3, offset, string</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [p1, p2, p3].join(<span class="string">' - '</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">str.replaceAll(regex, replacer)</span><br><span class="line"><span class="comment">// 123 - abc - 456</span></span><br></pre></td></tr></table></figure><p>上面例子中，正则表达式有三个组匹配，所以<code>replacer()</code>函数的第一个参数<code>match</code>是捕捉到的匹配内容（即字符串<code>123abc456</code>），后面三个参数<code>p1</code>、<code>p2</code>、<code>p3</code>则依次为三个组匹配。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;01-String-fromCodePoint&quot;&gt;&lt;a href=&quot;#01-String-fromCodePoint&quot; class=&quot;headerlink&quot; title=&quot;01 String.fromCodePoint()&quot;&gt;&lt;/a&gt;01 String.fromC
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
      <category term="转载" scheme="http://yoursite.com/tags/%E8%BD%AC%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>你知道该如何在前端实现文件的下载吗</title>
    <link href="http://yoursite.com/2020/09/02/download/"/>
    <id>http://yoursite.com/2020/09/02/download/</id>
    <published>2020-09-02T07:53:44.000Z</published>
    <updated>2023-05-16T01:32:38.263Z</updated>
    
    <content type="html"><![CDATA[<h2 id="01-前言"><a href="#01-前言" class="headerlink" title="01 前言"></a>01 前言</h2><p>下载是网页上常见的功能，那从后端获取数据后该如何创建下载链接呢，一般来说有两种情况：</p><ul><li>后台返回下载链接</li><li>后台返回文件内容</li></ul><p>那这两种情况分别应该如何处理呢，下面我们来详细讨论下</p><h2 id="02-后台返回下载链接"><a href="#02-后台返回下载链接" class="headerlink" title="02 后台返回下载链接"></a>02 后台返回下载链接</h2><p>直接返回下载链接的情况相对比较简单，只需要创建<code>a标签</code>，并执行点击事件就可以触发下载事件了</p><p><strong>「实现」</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//msg.url为后台获取的下载地址</span></span><br><span class="line"><span class="keyword">const</span> atag:any =  <span class="built_in">document</span>.createElementNS(<span class="string">"http://www.w3.org/1999/xhtml"</span>,<span class="string">'a'</span>);</span><br><span class="line">atag.href = msg.url;</span><br><span class="line">atag.download = <span class="string">'filename'</span>;</span><br><span class="line"></span><br><span class="line">atag.click();</span><br><span class="line">URL.revokeObjectURL(atag.href);</span><br></pre></td></tr></table></figure><p>若返回的链接为<code>http://xxx.xxx.doc</code>等带文件后缀的形式，想要修改文件名保存，那需要先获取此文件的<code>blob</code>，通常此情况是aws的S3，阿里云的OSS下载</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">fetch(fileUrl)</span><br><span class="line">    .then(<span class="function"><span class="params">res</span> =&gt;</span> res.blob())</span><br><span class="line">    .then(<span class="function"><span class="params">blob</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> url = <span class="built_in">window</span>.URL.createObjectURL(<span class="keyword">new</span> Blob([blob]));</span><br><span class="line">        <span class="keyword">const</span> atag = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>);</span><br><span class="line">        atag.href = url;</span><br><span class="line">        atag.download = <span class="string">'fileName'</span>;</span><br><span class="line">        <span class="keyword">let</span> event = <span class="keyword">new</span> MouseEvent(<span class="string">"click"</span>);</span><br><span class="line">        atag.dispatchEvent(event);</span><br><span class="line">        <span class="built_in">window</span>.URL.revokeObjectURL(url);</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h2 id="03-后台返回文件内容"><a href="#03-后台返回文件内容" class="headerlink" title="03 后台返回文件内容"></a>03 后台返回文件内容</h2><p>后台返回的是文件内容，就需要将文件内容转化为<code>Blob对象</code>，再利用<code>saveAs方法</code>对文件进行下载，当然也同样可以创建<code>a标签</code>，利用点击事件出发下载</p><p><strong>「实现」</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//msg.content为后台获取的文件内容</span></span><br><span class="line"><span class="keyword">const</span> content = <span class="keyword">new</span> Blob([msg.content]);</span><br><span class="line">saveAs(content,<span class="string">'file-name'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//or</span></span><br><span class="line"><span class="keyword">const</span> atag:any =  <span class="built_in">document</span>.createElementNS(<span class="string">"http://www.w3.org/1999/xhtml"</span>,<span class="string">'a'</span>);</span><br><span class="line">atag.href = URL.createObjectURL(content);</span><br><span class="line">atag.download = <span class="string">'filename'</span>;</span><br><span class="line"></span><br><span class="line">atag.click();</span><br><span class="line">URL.revokeObjectURL(atag.href);</span><br></pre></td></tr></table></figure><p>如果这是个pdf文件内容，你可以使用以下方法直接查看</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> content = <span class="keyword">new</span> Blob([msg.content], &#123;<span class="attr">type</span>: <span class="string">'application/pdf'</span>&#125;);</span><br><span class="line"><span class="keyword">let</span> pdfURL = URL.createObjectURL(content);</span><br><span class="line"><span class="built_in">window</span>.open(pdfURL);</span><br><span class="line">URL.revokeObjectURL(pdfURL);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;01-前言&quot;&gt;&lt;a href=&quot;#01-前言&quot; class=&quot;headerlink&quot; title=&quot;01 前言&quot;&gt;&lt;/a&gt;01 前言&lt;/h2&gt;&lt;p&gt;下载是网页上常见的功能，那从后端获取数据后该如何创建下载链接呢，一般来说有两种情况：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;后台
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="应用" scheme="http://yoursite.com/tags/%E5%BA%94%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>谈谈你对重绘和回流的理解</title>
    <link href="http://yoursite.com/2020/08/24/backflow-repaint/"/>
    <id>http://yoursite.com/2020/08/24/backflow-repaint/</id>
    <published>2020-08-24T02:56:28.000Z</published>
    <updated>2021-12-03T01:40:36.829Z</updated>
    
    <content type="html"><![CDATA[<h2 id="01-前言"><a href="#01-前言" class="headerlink" title="01 前言"></a>01 前言</h2><p>重回和回流是老生常谈的问题了，了解他们之前我们先来了解一下<code>浏览器渲染流水线</code>，这里就不详细展开了，不了解同学可以去看看我的关于<a href="http://www.baidu.com" target="_blank" rel="noopener">浏览器访问</a>的文章</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/browser-render.jpeg" alt="浏览器渲染流水线" title="">                </div>                <div class="image-caption">浏览器渲染流水线</div>            </figure><h2 id="02-回流"><a href="#02-回流" class="headerlink" title="02 回流"></a>02 回流</h2><p>回流也叫 <strong>重排</strong>。简单来说，就是当我们对<code>DOM 结构</code>的修改引发<code>DOM 几何尺寸</code>变化的时候，会发生回流的过程。</p><h3 id="触发条件"><a href="#触发条件" class="headerlink" title="触发条件"></a>触发条件</h3><p>以下的操作会触发回流:</p><ul><li>一个 DOM 元素的几何属性变化，常见的几何属性有width、height、padding、margin、left、top、border 等等, 这个很好理解。</li><li>使 DOM 节点发生增减或者移动。</li><li>读写 offset族、scroll族和client族属性的时候，浏览器为了获取这些值，需要进行回流操作。</li><li>调用 window.getComputedStyle 方法。</li></ul><h3 id="回流过程"><a href="#回流过程" class="headerlink" title="回流过程"></a>回流过程</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/backflow.jpeg" alt="回流过程" title="">                </div>                <div class="image-caption">回流过程</div>            </figure><p>依照上面的渲染流水线，触发回流的时候，DOM 结构发生改变，重新渲染 DOM 树，然后将后面的流程(包括主线程之外的任务)全部走一遍。</p><p>相当于将解析和合成的过程重新又走了一篇，开销是非常大的。</p><h2 id="03-重绘"><a href="#03-重绘" class="headerlink" title="03 重绘"></a>03 重绘</h2><p>简单来说，当<code>DOM 样式</code>改变，<code>几何属性不发生改变</code>的时候，会发生重绘(repaint)的过程。</p><h3 id="触发条件-1"><a href="#触发条件-1" class="headerlink" title="触发条件"></a>触发条件</h3><ul><li>当 DOM 的修改导致了样式的变化，并且没有影响几何属性的时候。</li></ul><h3 id="重绘过程"><a href="#重绘过程" class="headerlink" title="重绘过程"></a>重绘过程</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/repaint.jpeg" alt="重绘过程" title="">                </div>                <div class="image-caption">重绘过程</div>            </figure><p>由于没有导致 DOM 几何属性的变化，因此元素的位置信息不需要更新，从而省去布局的过程。跳过了生成布局树和建图层树的阶段，直接生成绘制列表，然后继续进行分块、生成位图等后面一系列操作。</p><p>可以看到，<strong>重绘不一定导致回流，但回流一定发生了重绘</strong>。</p><h2 id="04-合成-——-GPU加速"><a href="#04-合成-——-GPU加速" class="headerlink" title="04 合成 —— GPU加速"></a>04 合成 —— GPU加速</h2><p>利用 CSS3 的transform、opacity、filter这些属性就可以实现合成的效果，也就是大家常说的GPU加速。</p><p><strong>GPU加速的原因:</strong></p><p>在合成的情况下，会直接跳过布局和绘制流程，直接进入非主线程处理的部分，即直接交给合成线程处理。交给它处理有两大好处:</p><ul><li>能够充分发挥GPU的优势。合成线程生成位图的过程中会调用线程池，并在其中使用GPU进行加速生成，而GPU 是擅长处理位图数据的。</li><li>没有占用主线程的资源，即使主线程卡住了，效果依然能够流畅地展示。</li></ul><h2 id="05-实践意义"><a href="#05-实践意义" class="headerlink" title="05 实践意义"></a>05 实践意义</h2><p>知道上面的原理之后，对于开发过程有什么指导意义呢？</p><ul><li>避免频繁使用<code>style</code>，而是采用修改<code>class</code>的方式。</li><li>使用<code>createDocumentFragment</code>进行批量的 DOM 操作。</li><li>对于<code>resize</code>、<code>scroll</code> 等进行防抖/节流处理。</li><li>添加<code>will-change: tranform</code>，让渲染引擎为其单独实现一个图层，当这些变换发生时，仅仅只是利用合成线程去处理这些变换，而不牵扯到主线程，大大提高渲染效率。当然这个变化不限于tranform, 任何可以实现合成效果的 CSS 属性都能用<code>will-change</code>来声明。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;01-前言&quot;&gt;&lt;a href=&quot;#01-前言&quot; class=&quot;headerlink&quot; title=&quot;01 前言&quot;&gt;&lt;/a&gt;01 前言&lt;/h2&gt;&lt;p&gt;重回和回流是老生常谈的问题了，了解他们之前我们先来了解一下&lt;code&gt;浏览器渲染流水线&lt;/code&gt;，这里就不详细展
      
    
    </summary>
    
    
      <category term="浏览器" scheme="http://yoursite.com/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    
      <category term="重绘和回流" scheme="http://yoursite.com/tags/%E9%87%8D%E7%BB%98%E5%92%8C%E5%9B%9E%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>从输入URL到页面呈现到底发生了些什么</title>
    <link href="http://yoursite.com/2020/08/10/browser-access/"/>
    <id>http://yoursite.com/2020/08/10/browser-access/</id>
    <published>2020-08-10T02:16:00.000Z</published>
    <updated>2021-12-03T01:41:23.763Z</updated>
    
    <content type="html"><![CDATA[<h2 id="01-前言"><a href="#01-前言" class="headerlink" title="01 前言"></a>01 前言</h2><p>作为一个合格的前端工程师，浏览器相关的工作原理是我们进行性能优化的基石，了解浏览器原理也是前端系统知识体系中的重要一环。</p><p>你了解从输入URL地址到页面呈现，究竟发生了什么呢，本节将分<code>网络请求与响应</code>，<code>算法解析</code>，<code>渲染</code>三个过程来讲解。</p><h2 id="02-网络请求与响应"><a href="#02-网络请求与响应" class="headerlink" title="02 网络请求与响应"></a>02 网络请求与响应</h2><h3 id="1-浏览器构建请求行"><a href="#1-浏览器构建请求行" class="headerlink" title="1. 浏览器构建请求行"></a>1. 浏览器构建请求行</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET / HTTP/2</span><br><span class="line">//GET是请求方法，/为根路径，HTTP/2为版本协议</span><br></pre></td></tr></table></figure><h3 id="2-查找缓存"><a href="#2-查找缓存" class="headerlink" title="2. 查找缓存"></a>2. 查找缓存</h3><p>依次检查强缓存，以及协商缓存，如果缓存有效则直接使用，否则进入下一步</p><h3 id="3-DNS解析"><a href="#3-DNS解析" class="headerlink" title="3. DNS解析"></a>3. DNS解析</h3><p>我们输入的URL地址是域名，而数据包是通过<code>IP地址</code>传递的。因此需要通过 <strong>DNS域名系统</strong> 进行解析,将域名和IP地址一一对应</p><p>当然浏览器也提供了 <strong>DNS数据缓存功能</strong> 如果一个域名已经解析过了，下次访问则直接使用缓存的IP地址，无需重新解析</p><p>IP地址默认对应<code>80</code>端口</p><h3 id="4-建立TCP链接"><a href="#4-建立TCP链接" class="headerlink" title="4. 建立TCP链接"></a>4. 建立TCP链接</h3><blockquote><p>TCP（Transmission Control Protocol，传输控制协议）是一种面向连接的、可靠的、基于字节流的传输层通信协议。</p></blockquote><p>建立TCP连接需要经历三个阶段：</p><ul><li>通过 <strong>三次握手</strong> (即总共发送3个数据包确认已经建立连接)建立客户端和服务器之间的连接。</li><li>连接建立后，需要进行数据传输。传输过程必须进行 <strong>数据包校验</strong>，即接收方接收到数据包后必须要向发送方确认, 如果发送方没有接到这个确认的消息，就判定为数据包丢失，并重新发送该数据包。发送过程有一个优化策略，把大数据包拆成一个个小包，依次传输到接收方，接收方按顺序把它们组装成完整数据包。</li><li>数据传输完成后，通过 <strong>四次挥手</strong> 来断开连接。</li></ul><h3 id="5-发送HTTP请求"><a href="#5-发送HTTP请求" class="headerlink" title="5. 发送HTTP请求"></a>5. 发送HTTP请求</h3><p>TCP连接建立完毕后，浏览器可以和服务器开始通信，即开始发送 HTTP 请求。浏览器发 HTTP 请求要携带三样东西: <strong>请求行</strong>、<strong>请求头</strong> 和 <strong>请求体</strong>。</p><ul><li>请求行在第一步就已经构建完成</li><li>请求头中包括我们之前说的Cache-Control、If-Modified-Since、If-None-Match都可能存在</li><li>请求体，只有在<code>POST</code>请求中才会存在</li></ul><h3 id="6-网络相应"><a href="#6-网络相应" class="headerlink" title="6.网络相应"></a>6.网络相应</h3><p>HTTP 请求到达服务器，服务器进行对应的处理。最后要把数据传给浏览器，也就是返回网络响应。<br>跟请求类似，网络响应具有三个部分:<strong>响应行</strong>、<strong>响应头</strong> 和 <strong>响应体</strong>。</p><p>响应头由<code>HTTP协议版本</code>、<code>状态码</code>和<code>状态描述</code>组成。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HTTP/2 200 OK</span><br></pre></td></tr></table></figure><p>响应完成后，TCP连接就断开了吗？</p><ul><li>请求头或响应头中包含了<code>Connection</code>字段，如果值为<code>Keep-Alive</code>，表示建立了持久连接，这样TCP连接会一直保持，之后请求统一站点的资源会复用这个连接。</li><li>否则断开TCP连接, 请求-响应流程结束。</li></ul><h2 id="03-算法解析"><a href="#03-算法解析" class="headerlink" title="03 算法解析"></a>03 算法解析</h2><p>完成了网络请求和响应，如果响应头中<code>Content-Type</code>值是<code>text/html</code>，那么接下来就是浏览器的解析和渲染工作了。</p><p>解析部分主要分为以下几个步骤:</p><ul><li>构建 DOM 树(DOM Tree)</li><li>样式计算</li><li>生成布局树(Layout Tree)</li><li>生成图层树(Layer Tree)</li></ul><h3 id="1-构建-DOM-树-DOM-Tree"><a href="#1-构建-DOM-树-DOM-Tree" class="headerlink" title="1. 构建 DOM 树(DOM Tree)"></a>1. 构建 DOM 树(DOM Tree)</h3><p>由于浏览器无法直接理解<code>HTML字符串</code>因此需要将这一系列的字节流转换为别的数据结构，即DOM树。DOM树本质上是一个以document为根节点的多叉树。</p><p>常规的编程语言都是上下文无关文法，而HTML却是它 <strong>非上下文无关文法</strong> 的特性，决定了HTML Parser并不能使用常规编程语言的解析器来完成。</p><p>HTML5 规范详细地介绍了解析算法。这个算法分为两个阶段:</p><ul><li>标记化。</li><li>建树。</li></ul><p><strong><font style="color: #ff4081;">标记化算法</font></strong><br>这个算法输入为<code>HTML文本</code>，输出为<code>HTML标记</code>，也称为 <strong>标记生成器</strong>。运用有限自动状态机来完成。即在当当前状态下，接收一个或多个字符，就会更新到下一个状态。</p><ol><li>遇到&lt;, 状态为 <strong>标记打开</strong>。</li><li>接收[a-z]的字符，会进入 <strong>标记名称状态</strong>。</li><li>这个状态一直保持，直到遇到&gt;，表示标记名称记录完成，这时候变为 <strong>数据状态</strong>。</li></ol><p><strong><font style="color: #ff4081;">建树算法</font></strong><br>前面说过 DOM 树是一个以document为根节点的多叉树，因此解析器首先会创建一个document对象。标记生成器会把每个标记的信息发送给 <strong>建树器</strong>。建树器接收到相应的标记时，会创建对应的 DOM 对象。创建这个DOM对象后会做两件事情:</p><ul><li>将DOM对象加入 DOM 树中。</li><li>将对应标记压入存放开放(与闭合标签意思对应)元素的栈中。</li></ul><h3 id="2-样式计算"><a href="#2-样式计算" class="headerlink" title="2. 样式计算"></a>2. 样式计算</h3><p>CSS样式一般有三种来源：</p><ul><li>link标签引用</li><li>style标签中的样式</li><li>元素的内嵌style属性</li></ul><p>无论是那种来源的css样式文本，都是无法被浏览器直接识别的，因此浏览器会对css样式文本做以下操作：</p><ul><li><p><strong><font style="color: #ff4081;">格式化</font></strong><br>将css样式文本转化为多个 <strong>styleSheet</strong> 对象，通过<code>document.styleSheets</code>可查看这些对象。</p></li><li><p><strong><font style="color: #ff4081;">标准化</font></strong><br>一些 CSS 样式的数值并不被渲染引擎所理解，因此需要在计算样式之前将它们标准化，如<code>em-&gt;px</code>,<code>red-&gt;#ff0000</code>等。</p></li><li><p><strong><font style="color: #ff4081;">计算样式节点</font></strong><br>计算方式主要是两个规则: <strong>继承</strong> 和 <strong>层叠</strong>。计算完后，所有的样式值会被挂在到<code>window.getComputedStyle(element)</code>中。</p></li></ul><h3 id="3-生成布局树-Layout-Tree"><a href="#3-生成布局树-Layout-Tree" class="headerlink" title="3. 生成布局树(Layout Tree)"></a>3. 生成布局树(Layout Tree)</h3><p>布局树生成的大致工作如下:</p><ul><li>遍历生成的 DOM 树节点，并把他们添加到布局树中。</li><li>计算布局树节点的坐标位置。</li></ul><p>值得注意的是，布局树值只包含可见元素，对于<code>&lt;head&gt;</code>和<code>display: none</code>的元素，将不会被放入其中。</p><h3 id="4-生成图层树-Layer-Tree"><a href="#4-生成图层树-Layer-Tree" class="headerlink" title="4. 生成图层树(Layer Tree)"></a>4. 生成图层树(Layer Tree)</h3><p>一些复杂的场景，如3D动画等，元素含有层叠上下文时，需要构建一棵 <strong>图层树(Layer Tree)</strong> 来控制不同层元素的显示和隐藏等等。</p><p>一般情况下，节点的图层会默认属于父亲节点的图层，即 <strong>合成层</strong>。那什么时候会提升为一个单独的合成层呢？</p><p>一般有两种情况：</p><ul><li>显式合成</li><li>隐式合成</li></ul><p><strong><font style="color: #ff4081;">显示合成</font></strong><br>显示合成一般出现在两种情况下：</p><ul><li><p>拥有 <strong>层叠上下文</strong> 的节点，一般通过css属性创建，常见情况有：</p><ul><li>HTML根元素；</li><li>设置了z-index属性；</li><li>opacity 值不为 1；</li><li>transform 值不为 none；</li><li>filter 值不为 none；</li><li>isolation 值为 isolate|auto；</li><li>will-change 值为<code>z-index|opacity|transform|filter|isolation</code>之一。</li></ul></li><li><p>超出裁剪<br>如一个设置了大小的元素中，放了非常多的文字，那么超出的文字部分就需要被剪裁，从而提升为一个新图层。当然如果出现了滚动条，滚动条也会被提升为一个新图层。</p></li></ul><p><strong><font style="color: #ff4081;">隐式合成</font></strong><br>隐式合成，简单来说就是 <strong>层叠等级低</strong> 的节点被提升为单独的图层之后，所有层叠等级比它高的节点都会成为一个单独的图层。</p><p>隐式合成隐藏着巨大的风险，如果在一个大型应用中，当一个z-index比较低的元素被提升为单独图层之后，层叠在它上面的的元素统统都会被提升为单独的图层，可能会增加上千个图层，大大增加内存的压力，甚至直接让页面崩溃。这就是 <strong>层爆炸</strong> 的原理。</p><p>值得注意的是，当需要重绘时，只需要重绘显式合成图层本身，而不会影响到其他的隐式合成的图层。</p><h2 id="04-渲染"><a href="#04-渲染" class="headerlink" title="04 渲染"></a>04 渲染</h2><p>渲染主要分为以下几个步骤:</p><ul><li>生成绘制列表</li><li>生成图块并栅格化</li><li>显示器显示内容</li></ul><h3 id="1-生成绘制列表"><a href="#1-生成绘制列表" class="headerlink" title="1. 生成绘制列表"></a>1. 生成绘制列表</h3><p>渲染引擎会将图层的绘制拆分成一个个绘制指令，将这些指令按顺序组合成一个待绘制列表。</p><p>绘制列表可以在 Chrome 开发者工具中在设置栏中展开 more tools, 然后选择Layers面板看到</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/layers.png" alt="Layers面板" title="">                </div>                <div class="image-caption">Layers面板</div>            </figure><h3 id="2-生成图块和生成位图"><a href="#2-生成图块和生成位图" class="headerlink" title="2. 生成图块和生成位图"></a>2. 生成图块和生成位图</h3><p>渲染进程中绘制操作是由专门的线程来完成的，这个线程叫 <strong>合成线程</strong>。绘制列表准备好了之后，渲染进程的主线程会给合成线程发送commit消息，把绘制列表提交给合成线程。</p><p>通常情况下，页面大小远大于视窗大小，如果一口气全部绘制出来是相当浪费性能的。因此，合成线程要做的第一件事情就是将 <strong>图层分块</strong>。这些块的大小一般不会特别大，通常是 256 * 256 或者 512 * 512 这个规格。这样可以大大加速页面的首屏展示。</p><p>视窗外的图块数据存入 GPU 内存，由于浏览器内存上传到 GPU 内存的操作比较慢，即使是绘制一部分图块，也可能会耗费大量时间。因此针对这个问题，Chrome 采用了一个策略: 在首次合成图块时只采用一个低分辨率的图片，这样首屏展示的时候只是展示出低分辨率的图片，这个时候继续进行合成操作，当正常的图块内容绘制完毕后，会将当前低分辨率的图块内容替换。这也是 Chrome 底层优化首屏加载速度的一个手段。<br>顺便提醒一点，渲染进程中专门维护了一个栅格化线程池，专门负责把图块转换为位图数据。<br>然后合成线程会选择视口附近的图块，把它交给栅格化线程池生成位图。<br>生成位图的过程实际上都会使用 GPU 进行加速，生成的位图最后发送给合成线程。</p><h3 id="3-显示器显示内容"><a href="#3-显示器显示内容" class="headerlink" title="3. 显示器显示内容"></a>3. 显示器显示内容</h3><p>栅格化操作完成后，合成线程会生成一个绘制命令，即”DrawQuad”，并发送给浏览器进程。<br>浏览器进程中的viz组件接收到这个命令，根据这个命令，把页面内容绘制到内存，也就是生成了页面，然后把这部分内存发送给显卡。为什么发给显卡呢？我想有必要先聊一聊显示器显示图像的原理。<br>无论是 PC 显示器还是手机屏幕，都有一个固定的刷新频率，一般是 60 HZ，即 60 帧，也就是一秒更新 60 张图片，一张图片停留的时间约为 16.7 ms。而每次更新的图片都来自显卡的前缓冲区。而显卡接收到浏览器进程传来的页面后，会合成相应的图像，并将图像保存到后缓冲区，然后系统自动将前缓冲区和后缓冲区对换位置，如此循环更新。<br>看到这里你也就是明白，当某个动画大量占用内存的时候，浏览器生成图像的时候会变慢，图像传送给显卡就会不及时，而显示器还是以不变的频率刷新，因此会出现卡顿，也就是明显的掉帧现象。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;01-前言&quot;&gt;&lt;a href=&quot;#01-前言&quot; class=&quot;headerlink&quot; title=&quot;01 前言&quot;&gt;&lt;/a&gt;01 前言&lt;/h2&gt;&lt;p&gt;作为一个合格的前端工程师，浏览器相关的工作原理是我们进行性能优化的基石，了解浏览器原理也是前端系统知识体系中的重要一
      
    
    </summary>
    
    
      <category term="浏览器" scheme="http://yoursite.com/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    
      <category term="请求流程" scheme="http://yoursite.com/tags/%E8%AF%B7%E6%B1%82%E6%B5%81%E7%A8%8B/"/>
    
      <category term="渲染流程" scheme="http://yoursite.com/tags/%E6%B8%B2%E6%9F%93%E6%B5%81%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>浏览器的缓存原理，你都知道吗</title>
    <link href="http://yoursite.com/2020/08/10/browser-cache/"/>
    <id>http://yoursite.com/2020/08/10/browser-cache/</id>
    <published>2020-08-10T02:11:31.000Z</published>
    <updated>2021-12-03T01:41:49.174Z</updated>
    
    <content type="html"><![CDATA[<h2 id="01-前言"><a href="#01-前言" class="headerlink" title="01 前言"></a>01 前言</h2><p>作为一个合格的前端工程师，浏览器相关的工作原理是我们进行性能优化的基石，了解浏览器原理也是前端系统知识体系中的重要一环。</p><p>那关于浏览器的缓存你知道多少呢，本文将详细的来聊一聊浏览器的缓存问题</p><h2 id="02-浏览器的缓存"><a href="#02-浏览器的缓存" class="headerlink" title="02 浏览器的缓存"></a>02 浏览器的缓存</h2><p>缓存是性能优化中非常重要的一环，浏览器的缓存机制对开发也是非常重要的知识点。浏览器的缓存分为强缓存和协商缓存两种。</p><h3 id="强缓存"><a href="#强缓存" class="headerlink" title="强缓存"></a>强缓存</h3><blockquote><p>检查阶段无需发送HTTP请求，直接通过服务器返回的响应头中相应的字段来检查是否有效的缓存称为强缓存。</p></blockquote><p>检查字段存在于服务器返回的响应头中，告诉浏览器在过期时间前可以直接从缓存中获取数据，无需再次请求，在早期<code>HTTP/1.0</code>时代，该字段为Expires，而<code>HTTP/1.1</code>以后使用的是Cache-Control。</p><h4 id="Expires"><a href="#Expires" class="headerlink" title="Expires"></a><font style="color: #ff4081;">Expires</font></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Expires: Tue, 16 Jun 2020 15:08:00 GMT</span><br></pre></td></tr></table></figure><p>表示资源有效期到<code>2020年6月16号15点08分</code>，过了有效期就需要重新想服务器请求资源。<br>由于服务器的时间和浏览器的时间可能并不一致，因此这种方式返回的过期时间可能并不准确，在HTTP1.1版本中就抛弃了。</p><h4 id="Cache-Control"><a href="#Cache-Control" class="headerlink" title="Cache-Control"></a><font style="color: #ff4081;">Cache-Control</font></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cache-Control:max-age=3600</span><br></pre></td></tr></table></figure><p>表示资源在3600s之内都可以直接使用。它和Expires本质的不同在于它并没有采用具体的过期时间这个方式，而是采用过期时长来控制缓存。</p><p>Cache-Control可以与多个指令结合</p><ul><li>public: 客户端和代理服务器都可以缓存。</li><li>private: 只有浏览器能缓存了，中间的代理服务器不能缓存。</li><li>no-cache: 跳过当前的强缓存，发送HTTP请求，即直接进入协商缓存阶段。</li><li>no-store: 非常粗暴，不进行任何形式的缓存。</li><li>s-maxage: 这和max-age长得比较像，但是区别在于s-maxage是针对代理服务器的缓存时间。</li></ul><p>值得注意当Expires与Cache-Control同时存在时，优先考虑Cache-Control。</p><h3 id="协商缓存"><a href="#协商缓存" class="headerlink" title="协商缓存"></a>协商缓存</h3><blockquote><p>强缓存失效之后，浏览器在请求头中携带相应的缓存tag来向服务器发请求，由服务器根据这个tag，来决定是否使用缓存，这就是协商缓存。</p></blockquote><p>协商缓存tag分为两种: Last-Modified 和 ETag</p><h4 id="Last-Modified"><a href="#Last-Modified" class="headerlink" title="Last-Modified"></a><font style="color: #ff4081;">Last-Modified</font></h4><p>即最后修改时间。在浏览器第一次给服务器发送请求后，服务器会在响应头中加上这个字段。<br>浏览器接收到后，再次请求，会在请求头中携带<code>If-Modified-Since</code>字段，这个字段的值也就是最后修改时间。</p><p>服务器拿到请求头中的 If-Modified-Since 的字段后，会和服务器中该资源的最后修改时间对比:</p><ul><li>如果请求头中的这个值小于最后修改时间，说明是时候更新了。返回新的资源，跟常规的HTTP请求响应的流程一样。</li><li>否则返回304，告诉浏览器直接用缓存</li></ul><h4 id="ETag"><a href="#ETag" class="headerlink" title="ETag"></a><font style="color: #ff4081;">ETag</font></h4><p>ETag 是服务器根据当前文件内容，给文件生成的唯一标识，文件内容有改动，这个值就会变。<br>服务器通过响应头把这个值给浏览器，浏览器接收到ETag值，会在下次请求时，将这个值作为<code>If-None-Match</code>这个字段的内容，放在请求头中发送给服务器。</p><p>服务器接收到 If-None-Match 后，会跟服务器上该资源的 ETag 值进行比对:</p><ul><li>如果两者不一样，说明要更新了。返回新的资源，跟常规的HTTP请求响应的流程一样。</li><li>否则返回304，告诉浏览器直接用缓存。</li></ul><h4 id="两者对比"><a href="#两者对比" class="headerlink" title="两者对比"></a><font style="color: #ff4081;">两者对比</font></h4><p>在精准度上，ETag 优于 Last-Modified。ETag 是按照内容给资源上标识，因此能准确感知资源的变化。而 Last-Modified 是针对最后的修改时间，在一些特殊的情况并不能准确感知资源变化，主要有两种情况:</p><ul><li>编辑了资源文件，但是文件内容并没有更改，这样也会造成缓存失效。</li><li>Last-Modified 能够感知的单位时间是秒，如果文件在 1 秒内改变了多次，那么这时候的 Last-Modified 并没有体现出修改了。</li></ul><p>在性能上，Last-Modified 优于 ETag。如果两种方式都支持的话，服务器会优先考虑 ETag</p><h3 id="缓存位置"><a href="#缓存位置" class="headerlink" title="缓存位置"></a>缓存位置</h3><p>前面我们已经提到，当强缓存有效或者协商缓存中服务器返回304时，我们直接从缓存中获取资源。那这些资源究竟缓存在什么位置呢？</p><p>浏览器中的缓存位置一共有四种，按优先级从高到低排列分别是：</p><ul><li>Service Worker Cache - 借鉴了 Web Worker的 思路，即让 JS 运行在主线程之外</li><li>Memory Cache - 内存缓存，效率最快，存活时间最短，渲染进程结束后，内存缓存也就不存在了</li><li>Disk Cache - 磁盘缓存，效率比内存缓存慢，存储容量大和存储时间长，存放大的JS、CSS文件，以及内存使用率高时的文件</li><li>Push Cache - 即推送缓存，这是浏览器缓存的最后一道防线。它是 HTTP/2 中的内容</li></ul><h2 id="03-总结"><a href="#03-总结" class="headerlink" title="03 总结"></a>03 总结</h2><p>浏览器的缓存机制:</p><ol><li>首先通过 Cache-Control 验证强缓存是否可用，如果强缓存可用，直接使用</li><li>进入协商缓存，即发送 HTTP 请求，服务器通过请求头中的<code>If-Modified-Since</code>或者<code>If-None-Match</code>字段检查资源是否更新</li><li>若资源更新，返回资源和200状态码，否则返回304，告诉浏览器直接从缓存获取资源</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;01-前言&quot;&gt;&lt;a href=&quot;#01-前言&quot; class=&quot;headerlink&quot; title=&quot;01 前言&quot;&gt;&lt;/a&gt;01 前言&lt;/h2&gt;&lt;p&gt;作为一个合格的前端工程师，浏览器相关的工作原理是我们进行性能优化的基石，了解浏览器原理也是前端系统知识体系中的重要一
      
    
    </summary>
    
    
      <category term="浏览器" scheme="http://yoursite.com/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    
      <category term="缓存策略" scheme="http://yoursite.com/tags/%E7%BC%93%E5%AD%98%E7%AD%96%E7%95%A5/"/>
    
  </entry>
  
  <entry>
    <title>详细的谈一谈apply, call, bind</title>
    <link href="http://yoursite.com/2020/08/03/call-apply-bind/"/>
    <id>http://yoursite.com/2020/08/03/call-apply-bind/</id>
    <published>2020-08-03T07:51:22.000Z</published>
    <updated>2021-08-06T02:02:25.359Z</updated>
    
    <content type="html"><![CDATA[<h2 id="01-前言"><a href="#01-前言" class="headerlink" title="01 前言"></a>01 前言</h2><p>这又是一个面试经典问题，也是 ES5 中众多坑中的一个。虽然在 ES6 中可能会极大避免 this 产生的错误，但是为了一些老代码的维护，详细的了解一下 this 的指向和 call、apply、bind 三者的区别还是很有必要的。</p><h2 id="02-this的指向"><a href="#02-this的指向" class="headerlink" title="02 this的指向"></a>02 this的指向</h2><p>了解call，apply，bind之前我们先来了解下js中 this 的指向。其实 this 的指向，始终坚持一个原理： <strong>this 永远指向最后调用它的那个对象。</strong></p><p>下面我们就来讨论下这些场隐式绑定的场景this指向:</p><ul><li>全局上下文</li><li>直接调用函数</li><li>对象.方法的形式调用</li><li>DOM事件绑定(特殊)</li><li>new构造函数绑定</li><li>箭头函数</li></ul><h3 id="全局上下文"><a href="#全局上下文" class="headerlink" title="全局上下文"></a>全局上下文</h3><p>全局上下文默认this指向window, 严格模式下指向undefined。</p><h3 id="直接调用函数"><a href="#直接调用函数" class="headerlink" title="直接调用函数"></a>直接调用函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  a: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> func = obj.a;</span><br><span class="line">func();</span><br></pre></td></tr></table></figure><p>这种直接调用函数的情况。this相当于全局上下文的情况，默认指向window。</p><h3 id="对象-方法-调用"><a href="#对象-方法-调用" class="headerlink" title="对象.方法 调用"></a>对象.方法 调用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  a: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.a();</span><br></pre></td></tr></table></figure><p>这种<code>对象.方法</code>的调用情况。this指向的是这个对象。</p><h3 id="DOM事件绑定"><a href="#DOM事件绑定" class="headerlink" title="DOM事件绑定"></a>DOM事件绑定</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"myClick()"</span>&gt;</span>123<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> dom = <span class="built_in">document</span>.querySelector(<span class="string">'div'</span>);</span><br><span class="line">dom.addEventerListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myClick</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>addEventerListener</code>中 this 默认指向绑定事件的元素。</li><li><code>onclick</code>等系列事件和IE中使用的<code>attachEvent</code>默认this指向window。</li></ul><h3 id="new构造函数"><a href="#new构造函数" class="headerlink" title="new构造函数"></a>new构造函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.age = <span class="number">6</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> tz = <span class="keyword">new</span> Person(<span class="string">'Tz'</span>);</span><br></pre></td></tr></table></figure><p>此时构造函数中的this指向实例对象(tz)。</p><h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><p>箭头函数没有this, 因此也不能绑定。里面的this会指向当前最近的非箭头函数的this，找不到就是window(严格模式是undefined)。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  a: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">do</span> = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">do</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.a();</span><br></pre></td></tr></table></figure><p>this找到最近的非箭头函数是a方法，a现在绑定着obj, 因此箭头函数中的this是obj。</p><h2 id="03-apply，call，bind"><a href="#03-apply，call，bind" class="headerlink" title="03 apply，call，bind"></a>03 apply，call，bind</h2><p>bind，call，apply都是用于显性的绑定this，从而改变this的指向。</p><h3 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply" target="_blank" rel="noopener">MDN</a>给出的定义是：</p><blockquote><p>apply() 方法调用一个函数, 其具有一个指定的this值，以及作为 <strong>一个数组（或类似数组的对象）</strong> 提供的参数</p></blockquote><p>语法：</p><blockquote><p>func.apply(thisArg, [argsArray])</p></blockquote><ul><li><code>thisArg</code> 必选。在 func 函数运行时使用的 this 值。请注意，this可能不是该方法看到的实际值：如果这个函数处于非严格模式下，则指定为 null 或 undefined 时会自动替换为指向全局对象，原始值会被包装。</li><li><code>argsArray</code> 可选。一个数组或者类数组对象，其中的数组元素将作为单独的参数传给 func 函数。如果该参数的值为 null 或  undefined，则表示不需要传入任何参数。从ECMAScript 5 开始可以使用类数组对象。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Product</span>(<span class="params">name, price</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.price = price;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Food</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  Product.apply(<span class="keyword">this</span>, arr); <span class="comment">//this指向实例对象food</span></span><br><span class="line">  <span class="keyword">this</span>.category = <span class="string">'food'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> food = <span class="keyword">new</span> Food([<span class="string">'cheese'</span>, <span class="number">5</span>])</span><br></pre></td></tr></table></figure><h3 id="call"><a href="#call" class="headerlink" title="call"></a>call</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call" target="_blank" rel="noopener">MDN</a>给出的定义是：</p><blockquote><p>call() 方法使用一个指定的 this 值和单独给出的 <strong>一个或多个参数</strong> 来调用一个函数。</p></blockquote><p>语法：</p><blockquote><p>function.call(thisArg, arg1, arg2, …)</p></blockquote><ul><li><code>thisArg</code> 可选。在 function 函数运行时使用的 this 值。请注意，this可能不是该方法看到的实际值：如果这个函数处于非严格模式下，则指定为 null 或 undefined 时会自动替换为指向全局对象，原始值会被包装。</li><li><code>arg1, arg2, ...</code> 指定的参数列表。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Product</span>(<span class="params">name, price</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.price = price;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Food</span>(<span class="params">name, price</span>) </span>&#123;</span><br><span class="line">  Product.call(<span class="keyword">this</span>, name, price); <span class="comment">//this指向实例对象food</span></span><br><span class="line">  <span class="keyword">this</span>.category = <span class="string">'food'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> food = <span class="keyword">new</span> Food(<span class="string">'cheese'</span>, <span class="number">5</span>);</span><br></pre></td></tr></table></figure><h3 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call" target="_blank" rel="noopener">MDN</a>给出的定义是：</p><blockquote><p>bind() 方法创建一个新的函数，在 bind() <strong>被调用时</strong>，这个新函数的 this 被指定为 bind() 的第一个参数，而其余参数将作为新函数的参数，供调用时使用。</p></blockquote><p>语法：</p><blockquote><p>function.bind(thisArg[, arg1[, arg2[, …]]])</p></blockquote><ul><li><code>thisArg</code> 调用绑定函数时作为 this 参数传递给目标函数的值。 如果使用new运算符构造绑定函数，则忽略该值。当使用 bind 在 setTimeout 中创建一个函数（作为回调提供）时，作为 thisArg 传递的任何原始值都将转换为 object。如果 bind 函数的参数列表为空，或者thisArg是null或undefined，执行作用域的 this 将被视为新函数的 thisArg。</li><li><code>arg1, arg2, ...</code> 当目标函数被调用时，被预置入绑定函数的参数列表中的参数。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Product</span>(<span class="params">name, price</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.price = price;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Food</span>(<span class="params">name, price</span>) </span>&#123;</span><br><span class="line">  Product.bind(<span class="keyword">this</span>, name, price)(); <span class="comment">//this指向实例对象food</span></span><br><span class="line">  <span class="keyword">this</span>.category = <span class="string">'food'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> food = <span class="keyword">new</span> Food(<span class="string">'cheese'</span>, <span class="number">5</span>);</span><br></pre></td></tr></table></figure><h3 id="三者区别"><a href="#三者区别" class="headerlink" title="三者区别"></a>三者区别</h3><ul><li>apply 使用 <strong>数组</strong> 作为参数；</li><li>call 使用 <strong>参数列表</strong> 作为参数；</li><li>bind 使用 <strong>参数列表</strong> 作为参数，且创建了一个新的函数，需要 <strong>被调用</strong> 才会起作用。</li></ul><h2 id="04-手写模拟实现apply方法"><a href="#04-手写模拟实现apply方法" class="headerlink" title="04 手写模拟实现apply方法"></a>04 手写模拟实现apply方法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.myapply = <span class="function"><span class="keyword">function</span> (<span class="params">thisArg, args</span>) </span>&#123;</span><br><span class="line">  thisArg = <span class="built_in">Object</span>(thisArg) || <span class="built_in">window</span>;</span><br><span class="line">  <span class="keyword">let</span> fn = <span class="built_in">Symbol</span>();</span><br><span class="line">  thisArg[fn] = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">let</span> result = thisArg[fn](...args);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">delete</span> thisArg[fn];</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//test</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  a: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">x1, x2</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(x1, x2)  <span class="comment">//2, 3</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.a)  <span class="comment">//1</span></span><br><span class="line">&#125;</span><br><span class="line">test.myapply(obj, [<span class="number">2</span>, <span class="number">3</span>])</span><br></pre></td></tr></table></figure><h2 id="05-手写模拟实现call方法"><a href="#05-手写模拟实现call方法" class="headerlink" title="05 手写模拟实现call方法"></a>05 手写模拟实现call方法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.mycall = <span class="function"><span class="keyword">function</span> (<span class="params">thisArg, ...args</span>) </span>&#123;</span><br><span class="line">  thisArg = <span class="built_in">Object</span>(thisArg) || <span class="built_in">window</span>;</span><br><span class="line">  <span class="keyword">let</span> fn = <span class="built_in">Symbol</span>();</span><br><span class="line">  thisArg[fn] = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">let</span> result = thisArg[fn](...args);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">delete</span> thisArg[fn];</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//test</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  a: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">x1, x2</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(x1, x2)  <span class="comment">//2, 3</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.a)  <span class="comment">//1</span></span><br><span class="line">&#125;</span><br><span class="line">test.mycall(obj, <span class="number">2</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure><h2 id="06-手写模拟实现bind方法"><a href="#06-手写模拟实现bind方法" class="headerlink" title="06 手写模拟实现bind方法"></a>06 手写模拟实现bind方法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.mybind = <span class="function"><span class="keyword">function</span>(<span class="params">thisArg, ...args</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">...newArgs</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.call(thisArg, ...args, ...newArgs)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// test</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  a: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">x1, x2</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(x1, x2)  <span class="comment">//2, 3</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.a)  <span class="comment">//1</span></span><br><span class="line">&#125;</span><br><span class="line">test.mybind(obj, <span class="number">2</span>, <span class="number">3</span>)()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;01-前言&quot;&gt;&lt;a href=&quot;#01-前言&quot; class=&quot;headerlink&quot; title=&quot;01 前言&quot;&gt;&lt;/a&gt;01 前言&lt;/h2&gt;&lt;p&gt;这又是一个面试经典问题，也是 ES5 中众多坑中的一个。虽然在 ES6 中可能会极大避免 this 产生的错误，但是
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="手写API" scheme="http://yoursite.com/tags/%E6%89%8B%E5%86%99API/"/>
    
  </entry>
  
  <entry>
    <title>说一说 CSRF 攻击</title>
    <link href="http://yoursite.com/2020/07/30/csrf/"/>
    <id>http://yoursite.com/2020/07/30/csrf/</id>
    <published>2020-07-30T01:52:43.000Z</published>
    <updated>2021-12-03T01:39:55.950Z</updated>
    
    <content type="html"><![CDATA[<h2 id="01-前言"><a href="#01-前言" class="headerlink" title="01 前言"></a>01 前言</h2><p>Web开发离不开安全这个话题，确保网站或者网页应用的安全性，是每个开发人员都应该了解的事。今天我们就来了解下 CSRF 攻击。</p><h2 id="02-什么是-CSRF-攻击"><a href="#02-什么是-CSRF-攻击" class="headerlink" title="02 什么是 CSRF 攻击"></a>02 什么是 CSRF 攻击</h2><p>CSRF 全称是 <strong>Cross-site request forgery</strong>，翻译过来就是 <strong>“跨站请求伪造”</strong>，是指引诱用户打开第三方网站，在第三方网站中利用用户的登录状态发起的跨站请求。</p><p>一般的情况下，点开一个诱导你的链接，黑客会在你不知情的时候做哪些事情呢？</p><h3 id="1-自动发起-Get-请求"><a href="#1-自动发起-Get-请求" class="headerlink" title="1.自动发起 Get 请求"></a>1.自动发起 Get 请求</h3><p>黑客网页里面可能有一段这样的代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://xxx.com/info?user=xxx&amp;count=100"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在用户访问含有这个img的页面后，浏览器会自动向 <a href="https://xxx.com" target="_blank" rel="noopener">https://xxx.com</a> 发送 Get 请求。如果用户已经登录，那么此次请求将会带上 cookie 信息。</p><p>假如服务器端没有相应的验证机制，那么服务器会认为发请求的是一个正常的用户。因为携带了相应的 cookie，具有进行相应操作的权限，那么黑客就可以进行转账汇款等恶意操作。</p><h3 id="2-自动发起-Post-请求"><a href="#2-自动发起-Post-请求" class="headerlink" title="2.自动发起 Post 请求"></a>2.自动发起 Post 请求</h3><p>黑客可能自己填了一个表单，写了一段自动提交的脚本。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">'hacker-form'</span> <span class="attr">action</span>=<span class="string">"https://xxx.com/info"</span> <span class="attr">method</span>=<span class="string">"POST"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"xxx"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"count"</span> <span class="attr">value</span>=<span class="string">"100"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="built_in">document</span>.getElementById(<span class="string">'hacker-form'</span>).submit();</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>同样也会携带相应的用户 cookie 信息，让服务器误以为是一个正常的用户在操作，让各种恶意的操作变为可能。</p><h3 id="3-诱导点击发送-GET-请求"><a href="#3-诱导点击发送-GET-请求" class="headerlink" title="3.诱导点击发送 GET 请求"></a>3.诱导点击发送 GET 请求</h3><p>这种需要诱导用户去点击链接才会触发，这类的情况比如在论坛中发布照片，照片中嵌入了恶意链接，或者是以广告的形式去诱导，比如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://xxx/info?user=xxx&amp;count=100"</span> <span class="attr">taget</span>=<span class="string">"_blank"</span>&gt;</span>enter<span class="tag">&lt;<span class="name">a</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>用户点击后，自动发送 get 请求，后续操作 <strong>自动发 GET 请求</strong> 部分同理。</p><p>以上三种情况，就是 CSRF 攻击原理，跟 XSS 对比的话，CSRF 攻击并不需要将恶意代码注入 HTML 中，而是跳转新的页面，利用 <strong>服务器的验证漏洞</strong> 和 <strong>用户之前的登录状态</strong> 来模拟用户进行操作</p><h2 id="03-如何防范-CSRF-攻击"><a href="#03-如何防范-CSRF-攻击" class="headerlink" title="03 如何防范 CSRF 攻击"></a>03 如何防范 CSRF 攻击</h2><p>从 CSRF 的攻击原理中我们不难发现，黑客只能借助用户的 <strong>cookie</strong> 骗取服务器的信任，但由于浏览器同源策略的限制，黑客并不能对cookie的内容进行解析。</p><p>这就告诉我们，我们要保护的对象是那些可以直接产生数据改变的服务，而对于读取数据的服务，则不需要进行CSR的保护。而保护的关键是 <strong>在请求中放入黑客所不能伪造的信息</strong>，即 <strong>用户操作的验证机制</strong></p><h3 id="1-验证站点来源"><a href="#1-验证站点来源" class="headerlink" title="1.验证站点来源"></a>1.验证站点来源</h3><p>在服务器端验证请求来源的站点，由于大量的CSRF攻击来自第三方站点，因此可以设置服务器跨域禁止来自第三方站点的请求，主要通过HTTP请求头中的两个字段</p><ul><li>Origin</li><li>Referer</li></ul><p>其中，<strong>Origin</strong> 只包含<code>域名信息</code>，而 <strong>Referer</strong> 包含了具体的<code>URL 路径</code>。服务器可以通过解析这两个Header中的域名，确定请求的来源域。</p><p>但是这两者都是可以伪造的，通过AJax中自定义请求头即可，因此安全性略差。</p><h3 id="2-利用Cookie的SameSite属性"><a href="#2-利用Cookie的SameSite属性" class="headerlink" title="2.利用Cookie的SameSite属性"></a>2.利用Cookie的SameSite属性</h3><p>SameSite可以设置为三个值：<code>Strict</code>、<code>Lax</code>和<code>None</code>。</p><ul><li>在Strict模式下，浏览器完全禁止第三方请求携带Cookie。比如请求xxx.com网站只能在xxx.com域名当中请求才能携带 Cookie，在其他网站请求都不能。</li><li>在Lax模式，就宽松一点了，但是只能在<code>get 方法提交表单</code>或者<code>a 标签发送 get 请求</code>的情况下可以携带 Cookie，其他情况均不能。</li><li>在None模式下，Cookie将在所有上下文中发送，即允许跨域发送。</li></ul><h3 id="3-CSRF-Token"><a href="#3-CSRF-Token" class="headerlink" title="3.CSRF Token"></a>3.CSRF Token</h3><p>Token(令牌)做为Web领域验证身份是一个不错的选择，Token的步骤如下：</p><ul><li>第一步: 将CSRF Token输出到页面中。</li><li>第二步: 页面提交的请求携带这个Token。</li><li>第三步: 服务器验证Token是否正确，如果不合法则不予响应。</li></ul><h2 id="04-总结"><a href="#04-总结" class="headerlink" title="04 总结"></a>04 总结</h2><p>CSRF(Cross-site request forgery), 即跨站请求伪造，指的是黑客诱导用户点击链接，打开黑客的网站，然后黑客利用用户目前的登录状态发起跨站请求。</p><p>CSRF攻击一般会有三种方式:</p><ul><li>自动 GET 请求</li><li>自动 POST 请求</li><li>诱导点击发送 GET 请求</li></ul><p>防范措施:</p><ul><li>验证来源站点</li><li>利用 Cookie 的 SameSite 属性</li><li>CSRF Token。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;01-前言&quot;&gt;&lt;a href=&quot;#01-前言&quot; class=&quot;headerlink&quot; title=&quot;01 前言&quot;&gt;&lt;/a&gt;01 前言&lt;/h2&gt;&lt;p&gt;Web开发离不开安全这个话题，确保网站或者网页应用的安全性，是每个开发人员都应该了解的事。今天我们就来了解下 CSR
      
    
    </summary>
    
    
      <category term="计算机网络" scheme="http://yoursite.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="网络安全" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
      <category term="web攻击" scheme="http://yoursite.com/tags/web%E6%94%BB%E5%87%BB/"/>
    
  </entry>
  
  <entry>
    <title>谈一谈XSS攻击</title>
    <link href="http://yoursite.com/2020/07/29/xss/"/>
    <id>http://yoursite.com/2020/07/29/xss/</id>
    <published>2020-07-29T02:22:31.000Z</published>
    <updated>2021-08-06T02:02:32.482Z</updated>
    
    <content type="html"><![CDATA[<h2 id="01-前言"><a href="#01-前言" class="headerlink" title="01 前言"></a>01 前言</h2><p>Web开发离不开安全这个话题，确保网站或者网页应用的安全性，是每个开发人员都应该了解的事。今天我们就来了解下XSS攻击。</p><h2 id="02-什么是-XSS-攻击"><a href="#02-什么是-XSS-攻击" class="headerlink" title="02 什么是 XSS 攻击"></a>02 什么是 XSS 攻击</h2><p>XSS 全称是 <strong>Cross Site Scripting</strong> ,为了与CSS区分开来，故简称 <strong>XSS</strong>，翻译过来就是 <strong>“跨站脚本”</strong>。</p><p>XSS是指黑客往 HTML 文件中或者 DOM 中注入恶意脚本，在用户浏览页面时利用注入的恶意脚本对用户实施攻击，从而拿到用户的信息并进行操作。</p><p>最开始的时候，这种攻击是通过跨域来实现的，所以叫“跨域脚本”。发展到现在，往HTML文件中中插入恶意代码方式越来越多，所以是否跨域注入脚本已经不是唯一的注入手段了，但是 XSS 这个名字却一直保留至今。</p><p>注入恶意脚本可以完成这些事情：</p><ul><li>窃取Cookie</li><li>监听用户行为，比如用户输入账号密码后直接发给黑客服务器</li><li>在网页中生成浮窗广告</li><li>修改DOM伪造登入表单</li></ul><p>一般的情况下，XSS攻击有三种实现方式：</p><ul><li>存储型 XSS 攻击</li><li>反射型 XSS 攻击</li><li>文档型 XSS 攻击</li></ul><h3 id="存储型-XSS-攻击"><a href="#存储型-XSS-攻击" class="headerlink" title="存储型 XSS 攻击"></a>存储型 XSS 攻击</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/storageXSS.png" alt="存储型XSS" title="">                </div>                <div class="image-caption">存储型XSS</div>            </figure><p>从图上看，存储型 XSS 攻击大致步骤如下：</p><ul><li>黑客利用站点漏洞将一段恶意 JavaScript 代码提交到网站的数据库中；</li><li>用户向网站请求了包含恶意 JavaScript 脚本的页面；</li><li>在用户浏览该页面的时候，恶意脚本就会将用户的 Cookie 信息等数据上传到恶意服务器上。</li></ul><p>常见的场景是在评论区提交一份脚本代码，如果前后端没有做好转义工作直接上传到了服务器，那么在页面渲染的时候就会直接执行，相当于执行一段未知的JS代码，这是相当不安全的。</p><h3 id="反射型-XSS-攻击"><a href="#反射型-XSS-攻击" class="headerlink" title="反射型 XSS 攻击"></a>反射型 XSS 攻击</h3><p>反射型 XSS 指的是恶意脚本作为 <strong>网络请求的参数</strong> 。经过服务器，然后再反射到HTML文档中，执行解析。和存储型XSS攻击不一样的是，服务器并不会存储这些恶意脚本。</p><p>举个例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;sanyuan.com?a&#x3D;&lt;script&gt;alert(&quot;反射型XSS攻击&quot;)&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>在服务器端会拿到a参数,然后将内容返回给浏览器端，浏览器将这些内容作为HTML的一部分解析，发现是一个脚本，直接执行，这样就被攻击了。</p><h3 id="文档型-XSS-攻击"><a href="#文档型-XSS-攻击" class="headerlink" title="文档型 XSS 攻击"></a>文档型 XSS 攻击</h3><p>文档型的 XSS 攻击是一共基于 DOM 的 XSS 攻击，它不会经过服务端。黑客通过各种手段将恶意脚本注入用户页面 DOM 中，在数据传输的时候劫持网络数据包</p><p>常见的劫持方式有：</p><ul><li>WIFI路由器劫持</li><li>本地恶意软件</li></ul><h2 id="03-如何防范-XSS-攻击"><a href="#03-如何防范-XSS-攻击" class="headerlink" title="03 如何防范 XSS 攻击"></a>03 如何防范 XSS 攻击</h2><p>明白了三种 XSS 攻击的原理，我们能发现一个共同点: 都是让 <strong>恶意脚本直接能在浏览器中执行</strong>。</p><p>那么要防范它，就是要避免这些脚本代码的执行。</p><p>为了完成这一点，常见的防范措施有：</p><ul><li>对输入脚本进行过滤或转码</li><li>利用CSP</li><li>利用HttpOnly</li></ul><h3 id="「对输入脚本进行过滤或转码」"><a href="#「对输入脚本进行过滤或转码」" class="headerlink" title="「对输入脚本进行过滤或转码」"></a>「对输入脚本进行过滤或转码」</h3><p>本着千万不要相信任何用户输入的信念，无论是在前端和服务端，都要对用户的输入进行转码或者过滤。</p><p>举个例子👇：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>XSS攻击<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript">alert(<span class="string">'你受到XSS攻击了'</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>转码后：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">&amp;lt;</span>div<span class="symbol">&amp;gt;</span>XSS攻击<span class="symbol">&amp;lt;</span>/div<span class="symbol">&amp;gt;</span></span><br><span class="line"><span class="symbol">&amp;lt;</span>script<span class="symbol">&amp;gt;</span>alert(<span class="symbol">&amp;#39;</span>你受到XSS攻击了<span class="symbol">&amp;#39;</span>)<span class="symbol">&amp;lt;</span>/script<span class="symbol">&amp;gt;</span></span><br></pre></td></tr></table></figure><p>这样的代码在 html 解析的过程中是无法执行的。</p><p>当然也可以利用关键词过滤的方式，将<code>&lt;script&gt;</code>、<code>&lt;img&gt;</code>、<code>&lt;a&gt;</code>等关键字标签给删除。那么现在的内容只剩下:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>XSS攻击<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="「利用-CSP」"><a href="#「利用-CSP」" class="headerlink" title="「利用 CSP」"></a>「利用 CSP」</h3><p>CSP，即浏览器中的内容安全策略，它的核心思想是 <strong>服务器决定浏览器加载哪些资源</strong>，具体来说具有一下几个功能👇</p><ul><li>限制加载其他域下的资源文件；</li><li>禁止向其他域提交数据；</li><li>提供上报机制，能帮助我们及时发现 XSS 攻击。</li><li>禁止执行内联脚本和未授权的脚本；</li></ul><h3 id="「利用-HttpOnly」"><a href="#「利用-HttpOnly」" class="headerlink" title="「利用 HttpOnly」"></a>「利用 HttpOnly」</h3><p>由于绝大多数 XSS 攻击都是来盗用 Cookie 的，因此还可以通过使用 HttpOnly 属性来保护我们 Cookie 的安全。</p><p>HttpOnly 是服务器通过 HTTP 响应头来设置的，设置 Cookie 的 HttpOnly 属性后，JavaScript 便无法读取 Cookie 的值。这样也能很好的防范 XSS 攻击。</p><h2 id="04-总结"><a href="#04-总结" class="headerlink" title="04 总结"></a>04 总结</h2><p>XSS 攻击是指浏览器中执行恶意脚本, 然后拿到用户的信息进行操作。主要分为 <strong>存储型</strong>、<strong>反射型</strong>和<strong>文档型</strong>。</p><p>防范的措施包括:</p><ul><li>对输入内容过滤或者转码，尤其是类似于<code>&lt;script&gt;</code>、<code>&lt;img&gt;</code>、<code>&lt;a&gt;</code>标签</li><li>利用CSP</li><li>利用Cookie的HttpOnly属性</li></ul><p>除了以上策略之外，我们还可以通过添加验证码防止脚本冒充用户提交危险操作。而对于一些不受信任的输入，还可以限制其输入长度，这样可以增大 XSS 攻击的难度。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;01-前言&quot;&gt;&lt;a href=&quot;#01-前言&quot; class=&quot;headerlink&quot; title=&quot;01 前言&quot;&gt;&lt;/a&gt;01 前言&lt;/h2&gt;&lt;p&gt;Web开发离不开安全这个话题，确保网站或者网页应用的安全性，是每个开发人员都应该了解的事。今天我们就来了解下XSS攻
      
    
    </summary>
    
    
      <category term="网络安全" scheme="http://yoursite.com/categories/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="网络安全" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
      <category term="web攻击" scheme="http://yoursite.com/tags/web%E6%94%BB%E5%87%BB/"/>
    
  </entry>
  
  <entry>
    <title>谈一谈跨域，以及跨域解决方法</title>
    <link href="http://yoursite.com/2020/07/24/cross-origin/"/>
    <id>http://yoursite.com/2020/07/24/cross-origin/</id>
    <published>2020-07-24T02:33:03.000Z</published>
    <updated>2021-12-03T01:42:29.444Z</updated>
    
    <content type="html"><![CDATA[<h2 id="01-前言"><a href="#01-前言" class="headerlink" title="01 前言"></a>01 前言</h2><p>跨域是几乎我们在请求数据是都会遇到问题，那究竟什么是跨域，又如何解决呢？话不多说我们直接开始。</p><h2 id="02-同源策略"><a href="#02-同源策略" class="headerlink" title="02 同源策略"></a>02 同源策略</h2><p><strong>同源策略</strong> 是一个安全策略。所谓的同源,指的是<code>协议</code>,<code>域名</code>,<code>端口</code>相同。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/origin.png" alt="同源策略" title="">                </div>                <div class="image-caption">同源策略</div>            </figure><p>同源策略限制了一下行为：</p><ul><li>Cookie、LocalStorage、SessionStorage 和 IndexDB 无法读取</li><li>DOM 和 JS 对象无法获取</li><li>Ajax 请求发送不出去</li></ul><h2 id="03-什么是跨域"><a href="#03-什么是跨域" class="headerlink" title="03 什么是跨域"></a>03 什么是跨域</h2><p>跨域，是指浏览器不能执行其他网站的脚本。它是由浏览器的同源策略造成的，是浏览器对JavaScript实施的安全限制。</p><h2 id="04-解决方法"><a href="#04-解决方法" class="headerlink" title="04 解决方法"></a>04 解决方法</h2><h3 id="JSONP跨域"><a href="#JSONP跨域" class="headerlink" title="JSONP跨域"></a>JSONP跨域</h3><p>JSONP跨域是利用script标签src没有跨域限制的漏洞，将前端方法作为参数传递到服务器端，由服务器端注入参数后返回，实现服务器端向客户端通信。<br><strong>「实现」</strong></p><ul><li>创建script标签</li><li>设置script标签的src属性，以问号传递参数，设置好回调函数callback名称</li><li>插入html文本中</li><li>调用回调函数，res参数就是获取的数据</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line"></span><br><span class="line">script.src = <span class="string">'http://www.xxx.com/login?username=xxx&amp;callback=callback'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.body.appendChild(script);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callback</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>jquery方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">  url: <span class="string">'http://www.baidu.cn/login'</span>,</span><br><span class="line">  type: <span class="string">'GET'</span>,</span><br><span class="line">  dataType: <span class="string">'jsonp'</span>, <span class="comment">//请求方式为jsonp</span></span><br><span class="line">  jsonpCallback: <span class="string">'callback'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    <span class="string">"username"</span>: <span class="string">"xxx"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>「JSONP的优点」</strong></p><ul><li>它不像XMLHttpRequest对象实现的Ajax请求那样受到同源策略的限制</li><li>它的兼容性更好，在更加古老的浏览器中都可以运行，不需要XMLHttpRequest或ActiveX的支持</li><li>它在请求完毕后可以通过调用callback的方式回传结果。</li></ul><p><strong>「JSONP的缺点」</strong></p><ul><li>它只支持GET请求，具有局限性，不安全，可能会受到XSS攻击</li><li>它只能解决跨域HTTP请求这种情况，不能解决不同域的两个页面之间如何进行JavaScript调用的问题</li></ul><h3 id="跨域资源共享CORS"><a href="#跨域资源共享CORS" class="headerlink" title="跨域资源共享CORS"></a>跨域资源共享CORS</h3><h4 id="1-什么是CORS"><a href="#1-什么是CORS" class="headerlink" title="1.什么是CORS"></a>1.什么是CORS</h4><blockquote><p>CORS（Cross-Origin Resource Sharing）跨域资源共享，是一个W3C的标准。CORS背后的基本思想是使用自定义的HTTP头部让浏览器与服务器进行沟通，从而决定请求或响应是应该成功还是失败。</p></blockquote><p>CORS需要浏览器和服务器同时支持。目前，虽然所有浏览器都支持该功能，但IE8/9需要使用<code>XDomainRequest</code>对象来支持CORS。</p><p>整个CORS通信过程，都是浏览器自动完成，不需要用户参与。对于前端开发者来说，CORS通信与同源的AJAX通信没有差别，代码完全一样。浏览器一旦发现AJAX请求跨源，就会自动添加一些附加的头信息，有时还会多出一次附加的请求，但用户不会有感觉。</p><p>因此，实现CORS通信的关键是服务器，服务端设置 <code>Access-Control-Allow-Origin</code> 就可以开启 CORS。 该属性表示哪些域名可以访问资源，如果设置<code>通配符(*)</code>则表示所有网站都可以访问资源。</p><h4 id="2-简单请求与非简单请求"><a href="#2-简单请求与非简单请求" class="headerlink" title="2.简单请求与非简单请求"></a>2.简单请求与非简单请求</h4><p>CORS通行的这种方式分为两种请求：一种是 <strong>简单请求</strong>，另一种是 <strong>非简单请求</strong>，浏览器对这两种请求方式的处理方式是不同的。</p><p>所谓的简单请求，就是满足一下条件的请求，反之则为非简单请求。</p><p>条件1：请求方式为以下三者之一</p><ul><li>GET</li><li>HEAD</li><li>POST</li></ul><p>条件2：Content-Type 的值仅限于下列三者之一</p><ul><li>text/plain</li><li>multipart/form-data</li><li>application/x-www-form-urlencoded</li></ul><p><strong>「简单请求」</strong><br>对于简单请求，浏览器直接发出CORS请求。具体来说，就是浏览器发现这次跨源AJAX请求是简单请求，就自动在头信息之中，添加一个Origin字段。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Origin: http:<span class="comment">//localhost:5678</span></span><br></pre></td></tr></table></figure><p>Origin字段用来说明，本次请求来自哪个源（协议 + 域名 + 端口）。服务器根据这个值，决定是否同意这次请求。</p><p>如果Origin指定的源不在许可范围内，服务器会返回一个正常的HTTP响应，但响应头信息没有包含Access-Control-Allow-Origin字段，从而抛出一个错误被XMLHttpRequest的onerror回调函数捕获。</p><p>注意，这种错误无法通过状态码识别，因为HTTP回应的状态码有可能是200。</p><p>如果Origin指定的源在许可范围内，服务器返回的响应，会多出几个头信息字段：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Access-Control-Allow-Origin: http:<span class="comment">//api.bob.com</span></span><br><span class="line">Access-Control-Allow-Credentials: <span class="literal">true</span></span><br><span class="line">Access-Control-Expose-Headers: FooBar</span><br><span class="line">Content-Type: text/html; charset=utf<span class="number">-8</span></span><br></pre></td></tr></table></figure><p><strong>Access-Control-Allow-Origin</strong>: 必须。它的值要么是请求时Origin字段的值，要么是一个表示接受任意域名的请求。</p><p><strong>Access-Control-Allow-Credentials</strong>: 可选。它是一个布尔值且只能为<code>true</code>，表示允许浏览器发送Cookie。默认情况下，Cookie不包括在CORS请求之中。如果服务器不允许浏览器发送Cookie，删除该字段即可。</p><p><strong>Access-Control-Expose-Headers</strong>: 可选。CORS请求时，XMLHttpRequest对象的getResponseHeader()方法只能拿到6个基本字段：Cache-Control、Content-Language、Content-Type、Expires、Last-Modified、Pragma。如果想拿到其他字段，就必须在Access-Control-Expose-Headers里面指定。</p><p>需要注意的是，如果需要发送Cookie，Access-Control-Allow-Origin就不能设为星号，必须指定明确的、与请求网页一致的域名。同时，Cookie依然遵循同源政策，只有用服务器域名设置的Cookie才会上传，其他域名的Cookie并不会上传，且跨源原网页代码中的document.cookie也无法读取服务器域名下的Cookie。</p><p><strong>「非简单请求」</strong></p><p>非简单请求一般对服务器有特殊要求的请求，比如请求方法是PUT或DELETE，Content-Type字段的类型是application/json等。</p><p>非简单请求的CORS请求，会在正式通信之前，增加一次HTTP查询请求，称为 <strong>“预检”请求(preflight)</strong>。 该请求的方法是<code>OPTIONS</code>方法，浏览器先询问服务器，当前网页所在的域名是否在服务器的许可名单之中，以及可以使用哪些HTTP动词和头信息字段。只有得到肯定答复，浏览器才会发出正式的XMLHttpRequest请求，否则就报错。</p><h3 id="WebSocket协议跨域"><a href="#WebSocket协议跨域" class="headerlink" title="WebSocket协议跨域"></a>WebSocket协议跨域</h3><p>Websocket 是 HTML5 的一个持久化的协议，它实现了浏览器与服务器的全双工通信，同时也是跨域的一种解决方案。</p><p>WebSocket 和 HTTP 都是应用层协议，都基于 TCP 协议。但是 WebSocket 是一种 <strong>双向通信协议</strong>，在建立连接之后，WebSocket 的 server 与 client 都能主动向对方发送或接收数据。虽然 WebSocket 在建立连接时需要借助 HTTP 协议，但连接建立好了之后 client 与 server 之间的双向通信就与 HTTP 无关了。</p><p>来看下面这个例子</p><p>client向localhost:5678发送数据和接受数据👇</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> socket = <span class="keyword">new</span> WebSocket(<span class="string">'ws://localhost:5678'</span>);</span><br><span class="line">socket.onopen = <span class="function"><span class="params">()</span>=&gt;</span> &#123;</span><br><span class="line">  socket.send(<span class="string">'test'</span>);<span class="comment">//向服务器发送数据</span></span><br><span class="line">&#125;</span><br><span class="line">socket.onmessage = <span class="function">(<span class="params">e</span>)=&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(e.data);<span class="comment">//接收服务器返回的数据</span></span><br><span class="line">&#125;</span><br><span class="line">socket.onclose = <span class="function">(<span class="params">e</span>)=&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//当客户端收到服务端发送的关闭连接请求时，触发onclose事件</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"close"</span>);</span><br><span class="line">&#125;</span><br><span class="line">socket.onerror = <span class="function">(<span class="params">e</span>)=&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//如果出现连接、处理、接收、发送数据失败的时候触发onerror事件</span></span><br><span class="line">  <span class="built_in">console</span>.log(error);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后端部分👇</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// server.js</span></span><br><span class="line"><span class="keyword">const</span> WebSocket = <span class="built_in">require</span>(<span class="string">'ws'</span>);</span><br><span class="line"><span class="keyword">let</span> socketServer = <span class="keyword">new</span> WebSocket.Server(&#123;<span class="attr">port</span>:<span class="number">5678</span>&#125;);</span><br><span class="line">socketServer.on(<span class="string">'connection'</span>,(ws)=&gt; &#123;</span><br><span class="line">  ws.on(<span class="string">'message'</span>, (data)=&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">    ws.send(<span class="string">'server data'</span>)</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>想要深入了解WebSocket，可以尝试使用Socket.io</p><h3 id="nginx代理跨域"><a href="#nginx代理跨域" class="headerlink" title="nginx代理跨域"></a>nginx代理跨域</h3><h4 id="1-nginx配置解决iconfont跨域"><a href="#1-nginx配置解决iconfont跨域" class="headerlink" title="1.nginx配置解决iconfont跨域"></a>1.nginx配置解决iconfont跨域</h4><p>浏览器跨域访问js、css、img等常规静态资源被同源策略许可，但iconfont字体文件(eot/otf/ttf/woff/svg)例外，此时可在nginx的静态资源服务器中加入以下配置。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">  add_header Access-Control-Allow-Origin *;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-nginx反向代理接口跨域"><a href="#2-nginx反向代理接口跨域" class="headerlink" title="2.nginx反向代理接口跨域"></a>2.nginx反向代理接口跨域</h4><p><strong>「原理」</strong><br>同源策略是浏览器的安全策略，不是HTTP协议的一部分。服务器端调用HTTP接口只是使用HTTP协议，不会执行JS脚本，因此不需要同源策略，也就不存在跨越问题。</p><p><strong>「实现」</strong><br>通过nginx配置一个代理服务器（域名与domain1相同，端口不同）做跳板机，反向代理访问domain2接口，并且可以顺便修改cookie中domain信息，方便当前域cookie写入，实现跨域登录。</p><p>nginx配置👇</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#proxy服务器</span><br><span class="line">server &#123;</span><br><span class="line">  listen <span class="number">81</span>;</span><br><span class="line">  server_name www.domain1.com;</span><br><span class="line">  location / &#123;</span><br><span class="line">    proxy_pass http:<span class="comment">//www.domain2.com:8080;  #反向代理</span></span><br><span class="line">    proxy_cookie_domain www.domain2.com www.domain1.com; #修改cookie里域名</span><br><span class="line">    index index.html index.htm;</span><br><span class="line">    # 当用webpack-dev-server等中间件代理接口访问nignx时，此时无浏览器参与，故没有同源限制，下面的跨域配置可不启用</span><br><span class="line">    #add_header Access-Control-Allow-Origin http://www.domain1.com;  #当前端只跨域不带cookie时，可为*</span><br><span class="line">    add_header Access-Control-Allow-Credentials <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前端部分👇</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line"></span><br><span class="line"><span class="comment">// set browser read/write cookie</span></span><br><span class="line">xhr.withCredentials = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// open nginx proxy</span></span><br><span class="line">xhr.open(<span class="string">'get'</span>, <span class="string">'http://www.domain1.com:81/?user=admin'</span>, <span class="literal">true</span>);</span><br><span class="line">xhr.send();</span><br></pre></td></tr></table></figure><p>后端部分👇</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">const</span> qs = <span class="built_in">require</span>(<span class="string">'querystring'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> server = http.createServer();</span><br><span class="line">server.on(<span class="string">'request'</span>, (req, res)=&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> params = qs.parse(req.url.substring(<span class="number">2</span>));</span><br><span class="line">  <span class="comment">// write cookie</span></span><br><span class="line">  res.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">    <span class="string">'Set-Cookie'</span>: <span class="string">'l=a123456;Path=/;Domain=www.domain2.com;HttpOnly'</span>  <span class="comment">// HttpOnly:脚本无法读取</span></span><br><span class="line">  &#125;);</span><br><span class="line">  res.write(<span class="built_in">JSON</span>.stringify(params));</span><br><span class="line">  res.end();</span><br><span class="line">&#125;);</span><br><span class="line">server.listen(<span class="string">'8080'</span>);</span><br></pre></td></tr></table></figure><p><a href="https://www.jianshu.com/p/f049ac7e2220" target="_blank" rel="noopener">nginx参考</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;01-前言&quot;&gt;&lt;a href=&quot;#01-前言&quot; class=&quot;headerlink&quot; title=&quot;01 前言&quot;&gt;&lt;/a&gt;01 前言&lt;/h2&gt;&lt;p&gt;跨域是几乎我们在请求数据是都会遇到问题，那究竟什么是跨域，又如何解决呢？话不多说我们直接开始。&lt;/p&gt;
&lt;h2 id
      
    
    </summary>
    
    
      <category term="计算机网络" scheme="http://yoursite.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="网络安全" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
</feed>
